{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PagedAllDelegationsResponse",
  "description": "Response containing paged list of all delegations currently active.",
  "type": "object",
  "required": [
    "delegations"
  ],
  "properties": {
    "delegations": {
      "description": "Each individual delegation made.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Delegation"
      }
    },
    "start_next_after": {
      "description": "Field indicating paging information for the following queries if the caller wishes to get further entries.",
      "type": [
        "array",
        "null"
      ],
      "items": [
        {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        {
          "type": "string"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Delegation": {
      "description": "Information about tokens being delegated towards given mixnode in order to accrue rewards with their work.",
      "type": "object",
      "required": [
        "amount",
        "cumulative_reward_ratio",
        "height",
        "node_id",
        "owner"
      ],
      "properties": {
        "amount": {
          "description": "Original delegation amount. Note that it is never mutated as delegation accumulates rewards.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "cumulative_reward_ratio": {
          "description": "Value of the \"unit delegation\" associated with the mixnode at the time of delegation.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "height": {
          "description": "Block height where this delegation occurred.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "node_id": {
          "description": "Id of the Node that this delegation was performed against.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "owner": {
          "description": "Address of the owner of this delegation.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "proxy": {
          "description": "Proxy address used to delegate the funds on behalf of another address",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
