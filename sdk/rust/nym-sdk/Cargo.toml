[package]
name = "nym-sdk"
version = "0.1.0"
edition = "2021"
license.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[bin]]
name = "nym-proxy-server"
path = "src/tcp_proxy/bin/proxy_server.rs"

[[bin]]
name = "nym-proxy-client"
path = "src/tcp_proxy/bin/proxy_client.rs"

[dependencies]
async-trait = { workspace = true }
bip39 = { workspace = true }
nym-client-core = { path = "../../../common/client-core", features = [
    "fs-credentials-storage",
    "fs-surb-storage",
    "fs-gateways-storage",
] }
nym-crypto = { path = "../../../common/crypto" }
nym-gateway-requests = { path = "../../../common/gateway-requests" }
nym-bandwidth-controller = { path = "../../../common/bandwidth-controller" }
nym-credentials = { path = "../../../common/credentials" }
nym-credentials-interface = { path = "../../../common/credentials-interface" }
nym-credential-storage = { path = "../../../common/credential-storage" }
nym-credential-utils = { path = "../../../common/credential-utils" }
nym-network-defaults = { path = "../../../common/network-defaults" }
nym-sphinx = { path = "../../../common/nymsphinx" }
nym-statistics-common = { path = "../../../common/statistics" }
nym-task = { path = "../../../common/task" }
nym-topology = { path = "../../../common/topology" }
nym-socks5-client-core = { path = "../../../common/socks5-client-core" }
nym-validator-client = { path = "../../../common/client-libs/validator-client", features = [
    "http-client",
] }
nym-http-api-client = { path = "../../../common/http-api-client" }
nym-socks5-requests = { path = "../../../common/socks5/requests" }
nym-ordered-buffer = { path = "../../../common/socks5/ordered-buffer" }
nym-service-providers-common = { path = "../../../service-providers/common" }
nym-sphinx-addressing = { path = "../../../common/nymsphinx/addressing" }
nym-bin-common = { path = "../../../common/bin-common" }
bytecodec = { workspace = true }
httpcodec = { workspace = true }
bytes = { workspace = true }
http = { workspace = true }
zeroize = { workspace = true }

futures = { workspace = true }
log = { workspace = true }
rand = { workspace = true, features = ["small_rng"] }
tap = { workspace = true }
thiserror = { workspace = true }
url = { workspace = true }
toml = { workspace = true }
tempfile = { workspace = true }

# tcpproxy dependencies
clap = { workspace = true, features = ["derive"] }
anyhow.workspace = true
dashmap.workspace = true
tokio.workspace = true
tokio-stream.workspace = true
tokio-util.workspace = true
uuid = { workspace = true, features = ["v4", "serde"] }
bincode = { workspace = true }
serde = { workspace = true, features = ["derive"] }
# tracing.workspace = true
# tracing-subscriber = { workspace = true, features = ["env-filter"] }
dirs.workspace = true

opentelemetry = { workspace = true, optional = true}
opentelemetry_sdk = { workspace = true, optional = true }

tracing = { workspace = true, features = ["std"] }
tracing-subscriber = { workspace = true, features = ["registry", "std"] }
tracing-core = { workspace = true }
tracing-opentelemetry = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
opentelemetry-semantic-conventions = { workspace = true, optional = true }

[dev-dependencies]
anyhow = { workspace = true }
dotenvy = { workspace = true }
reqwest = { workspace = true, features = ["json", "socks"] }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["full"] }
time = { workspace = true }
nym-bin-common = { path = "../../../common/bin-common" }

# extra dependencies for libp2p examples
#libp2p = { git = "https://github.com/ChainSafe/rust-libp2p.git", rev = "e3440d25681df380c9f0f8cfdcfd5ecc0a4f2fb6", features = [ "identify", "macros", "ping", "tokio", "tcp", "dns", "websocket", "noise", "mplex", "yamux", "gossipsub" ]}
tokio-stream = { workspace = true }
tokio-util = { workspace = true, features = ["codec"] }
parking_lot = { workspace = true }
hex = { workspace = true }

[features]
libp2p-vanilla = []
otel = [
    "nym-bin-common/otel",
    "nym-gateway-requests/otel",
    "nym-socks5-client-core/otel",
    "nym-client-core/otel",
    "opentelemetry",
    "opentelemetry_sdk",
    "opentelemetry-otlp",
    "opentelemetry-semantic-conventions",
    "tracing-opentelemetry",
]
