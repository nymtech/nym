{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ContractState",
  "description": "The current state of the mixnet contract.",
  "type": "object",
  "required": [
    "owner",
    "params",
    "rewarding_denom",
    "rewarding_validator_address",
    "vesting_contract_address"
  ],
  "properties": {
    "owner": {
      "description": "Address of the contract owner.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "params": {
      "description": "Contract parameters that could be adjusted in a transaction the contract admin.",
      "allOf": [
        {
          "$ref": "#/definitions/ContractStateParams"
        }
      ]
    },
    "rewarding_denom": {
      "description": "The expected denom used for rewarding (and realistically any other operation). Default: `unym`",
      "type": "string"
    },
    "rewarding_validator_address": {
      "description": "Address of \"rewarding validator\" (nym-api) that's allowed to send any rewarding-related transactions.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "vesting_contract_address": {
      "description": "Address of the vesting contract to which the mixnet contract would be sending all track-related messages.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ContractStateParams": {
      "description": "Contract parameters that could be adjusted in a transaction by the contract admin.",
      "type": "object",
      "required": [
        "minimum_gateway_pledge",
        "minimum_mixnode_pledge"
      ],
      "properties": {
        "interval_operating_cost": {
          "description": "Defines the allowed interval operating cost range of operators. default: 0 - 1'000'000'000'000'000 (1 Billion native tokens - the total supply)",
          "default": {
            "maximum": "1000000000000000",
            "minimum": "0"
          },
          "allOf": [
            {
              "$ref": "#/definitions/RangedValue_for_Uint128"
            }
          ]
        },
        "minimum_gateway_pledge": {
          "description": "Minimum amount a gateway must pledge to get into the system.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "minimum_mixnode_delegation": {
          "description": "Minimum amount a delegator must stake in orders for his delegation to get accepted.",
          "anyOf": [
            {
              "$ref": "#/definitions/Coin"
            },
            {
              "type": "null"
            }
          ]
        },
        "minimum_mixnode_pledge": {
          "description": "Minimum amount a mixnode must pledge to get into the system.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "profit_margin": {
          "description": "Defines the allowed profit margin range of operators. default: 0% - 100%",
          "default": {
            "maximum": "1",
            "minimum": "0"
          },
          "allOf": [
            {
              "$ref": "#/definitions/RangedValue_for_Percent"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Percent": {
      "description": "Percent represents a value between 0 and 100% (i.e. between 0.0 and 1.0)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "RangedValue_for_Percent": {
      "type": "object",
      "required": [
        "maximum",
        "minimum"
      ],
      "properties": {
        "maximum": {
          "$ref": "#/definitions/Percent"
        },
        "minimum": {
          "$ref": "#/definitions/Percent"
        }
      },
      "additionalProperties": false
    },
    "RangedValue_for_Uint128": {
      "type": "object",
      "required": [
        "maximum",
        "minimum"
      ],
      "properties": {
        "maximum": {
          "$ref": "#/definitions/Uint128"
        },
        "minimum": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
