name: Build and upload Node Status API container to harbor.nymte.ch
on:
  workflow_dispatch:
    inputs:
      release_image:
        description: 'Tag image as a release'
        required: true
        default: false
        type: boolean
        
env:
  WORKING_DIRECTORY: "nym-node-status-api/nym-node-status-api"
  CONTAINER_NAME: "node-status-api"

jobs:
  build-container:
    runs-on: arc-ubuntu-22.04-dind
    steps:
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.nymte.ch
          username: ${{ secrets.HARBOR_ROBOT_USERNAME }}
          password: ${{ secrets.HARBOR_ROBOT_SECRET }}

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure git identity
        run: |
          git config --global user.email "lawrence@nymtech.net"
          git config --global user.name "Lawrence Stalder"

      - name: Get version from cargo.toml
        uses: mikefarah/yq@v4.45.4
        id: get_version
        with:
          cmd: yq -oy '.package.version' ${{ env.WORKING_DIRECTORY }}/Cargo.toml

      - name: Set GIT_TAG variable
        run: echo "GIT_TAG=${{ env.WORKING_DIRECTORY }}-${{ steps.get_version.outputs.result }}" >> $GITHUB_ENV

      - name: Set RELEASE_TAG variable
        if: github.event.inputs.release_image == 'true'
        run: echo "RELEASE_TAG=golden-" >> $GITHUB_ENV

      - name: Set IMAGE_NAME_AND_TAGS variable
        run: echo "IMAGE_NAME_AND_TAGS=${{ env.CONTAINER_NAME }}:${{ env.RELEASE_TAG }}${{ steps.get_version.outputs.result }}" >> $GITHUB_ENV

      - name: New env vars
        run: echo "RELEASE_TAG='$RELEASE_TAG' GIT_TAG='$GIT_TAG' IMAGE_NAME_AND_TAGS='$IMAGE_NAME_AND_TAGS'"        


      - name: Remove existing tag if exists
        run: |
          if git rev-parse $${{ GIT_TAG }} >/dev/null 2>&1; then
            git push --delete origin $${{ GIT_TAG }}
            git tag -d $${{ GIT_TAG }}
          fi

      - name: Create tag
        run: |
          git tag -a $${{ GIT_TAG }} -m "Version ${{ steps.get_version.outputs.result }}-${{ steps.cleanup_gateway_probe_ref.outputs.git_ref }}"
          git push origin $${{ GIT_TAG }}

      - name: BuildAndPushImageOnHarbor
        run: |
          docker build -f ${{ env.WORKING_DIRECTORY }}/Dockerfile . -t harbor.nymte.ch/nym/${{ IMAGE_NAME_AND_TAGS }} -t harbor.nymte.ch/nym/${{ IMAGE_NAME_AND_TAGS }}:latest
          docker push harbor.nymte.ch/nym/${{ env.CONTAINER_NAME }} --all-tags

