/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export type Percent = Decimal;
export type Uint128 = string;
export interface InstantiateMsg {
  current_nym_node_version: string;
  epoch_duration: Duration;
  epochs_in_interval: number;
  initial_rewarding_params: InitialRewardingParams;
  interval_operating_cost?: RangedValueForUint128;
  key_validity_in_epochs?: number | null;
  profit_margin?: RangedValueForPercent;
  rewarding_denom: string;
  rewarding_validator_address: string;
  version_score_params?: VersionScoreFormulaParams;
  version_score_weights?: OutdatedVersionWeights;
  vesting_contract_address: string;
}
export interface Duration {
  nanos: number;
  secs: number;
}
export interface InitialRewardingParams {
  active_set_work_factor: Decimal;
  initial_reward_pool: Decimal;
  initial_staking_supply: Decimal;
  interval_pool_emission: Percent;
  rewarded_set_params: RewardedSetParams;
  staking_supply_scale_factor: Percent;
  sybil_resistance: Percent;
}
export interface RewardedSetParams {
  entry_gateways: number;
  exit_gateways: number;
  mixnodes: number;
  standby: number;
}
export interface RangedValueForUint128 {
  maximum: Uint128;
  minimum: Uint128;
}
export interface RangedValueForPercent {
  maximum: Percent;
  minimum: Percent;
}
export interface VersionScoreFormulaParams {
  penalty: Decimal;
  penalty_scaling: Decimal;
}
export interface OutdatedVersionWeights {
  major: number;
  minor: number;
  patch: number;
  prerelease: number;
}
export type ExecuteMsg = {
  update_admin: {
    admin: string;
  };
} | {
  update_rewarding_validator_address: {
    address: string;
  };
} | {
  update_contract_state_params: {
    update: ContractStateParamsUpdate;
  };
} | {
  update_current_nym_node_semver: {
    current_version: string;
  };
} | {
  update_active_set_distribution: {
    force_immediately: boolean;
    update: ActiveSetUpdate;
  };
} | {
  update_rewarding_params: {
    force_immediately: boolean;
    updated_params: IntervalRewardingParamsUpdate;
  };
} | {
  update_interval_config: {
    epoch_duration_secs: number;
    epochs_in_interval: number;
    force_immediately: boolean;
  };
} | {
  begin_epoch_transition: {};
} | {
  reconcile_epoch_events: {
    limit?: number | null;
  };
} | {
  assign_roles: {
    assignment: RoleAssignment;
  };
} | {
  bond_mixnode: {
    cost_params: NodeCostParams;
    mix_node: MixNode;
    owner_signature: MessageSignature;
  };
} | {
  bond_mixnode_on_behalf: {
    cost_params: NodeCostParams;
    mix_node: MixNode;
    owner: string;
    owner_signature: MessageSignature;
  };
} | {
  pledge_more: {};
} | {
  pledge_more_on_behalf: {
    owner: string;
  };
} | {
  decrease_pledge: {
    decrease_by: Coin;
  };
} | {
  decrease_pledge_on_behalf: {
    decrease_by: Coin;
    owner: string;
  };
} | {
  unbond_mixnode: {};
} | {
  unbond_mixnode_on_behalf: {
    owner: string;
  };
} | {
  update_cost_params: {
    new_costs: NodeCostParams;
  };
} | {
  update_mixnode_cost_params_on_behalf: {
    new_costs: NodeCostParams;
    owner: string;
  };
} | {
  update_mixnode_config: {
    new_config: MixNodeConfigUpdate;
  };
} | {
  update_mixnode_config_on_behalf: {
    new_config: MixNodeConfigUpdate;
    owner: string;
  };
} | {
  migrate_mixnode: {};
} | {
  bond_gateway: {
    gateway: Gateway;
    owner_signature: MessageSignature;
  };
} | {
  bond_gateway_on_behalf: {
    gateway: Gateway;
    owner: string;
    owner_signature: MessageSignature;
  };
} | {
  unbond_gateway: {};
} | {
  unbond_gateway_on_behalf: {
    owner: string;
  };
} | {
  update_gateway_config: {
    new_config: GatewayConfigUpdate;
  };
} | {
  update_gateway_config_on_behalf: {
    new_config: GatewayConfigUpdate;
    owner: string;
  };
} | {
  migrate_gateway: {
    cost_params?: NodeCostParams | null;
  };
} | {
  bond_nym_node: {
    cost_params: NodeCostParams;
    node: NymNode;
    owner_signature: MessageSignature;
  };
} | {
  unbond_nym_node: {};
} | {
  update_node_config: {
    update: NodeConfigUpdate;
  };
} | {
  delegate: {
    node_id: number;
  };
} | {
  delegate_to_mixnode_on_behalf: {
    delegate: string;
    mix_id: number;
  };
} | {
  undelegate: {
    node_id: number;
  };
} | {
  undelegate_from_mixnode_on_behalf: {
    delegate: string;
    mix_id: number;
  };
} | {
  reward_node: {
    node_id: number;
    params: NodeRewardingParameters;
  };
} | {
  withdraw_operator_reward: {};
} | {
  withdraw_operator_reward_on_behalf: {
    owner: string;
  };
} | {
  withdraw_delegator_reward: {
    node_id: number;
  };
} | {
  withdraw_delegator_reward_on_behalf: {
    mix_id: number;
    owner: string;
  };
} | {
  migrate_vested_mix_node: {};
} | {
  migrate_vested_delegation: {
    mix_id: number;
  };
};
export type Role = "eg" | "l1" | "l2" | "l3" | "xg" | "stb";
export type MessageSignature = number[];
export interface ContractStateParamsUpdate {
  config_score_params?: ConfigScoreParamsUpdate | null;
  delegations_params?: DelegationsParams | null;
  operators_params?: OperatorsParamsUpdate | null;
}
export interface ConfigScoreParamsUpdate {
  version_score_formula_params?: VersionScoreFormulaParams | null;
  version_weights?: OutdatedVersionWeights | null;
}
export interface DelegationsParams {
  minimum_delegation?: Coin | null;
}
export interface Coin {
  amount: Uint128;
  denom: string;
}
export interface OperatorsParamsUpdate {
  interval_operating_cost?: RangedValueForUint128 | null;
  minimum_pledge?: Coin | null;
  profit_margin?: RangedValueForPercent | null;
}
export interface ActiveSetUpdate {
  entry_gateways: number;
  exit_gateways: number;
  mixnodes: number;
}
export interface IntervalRewardingParamsUpdate {
  active_set_work_factor?: Decimal | null;
  interval_pool_emission?: Percent | null;
  reward_pool?: Decimal | null;
  rewarded_set_params?: RewardedSetParams | null;
  staking_supply?: Decimal | null;
  staking_supply_scale_factor?: Percent | null;
  sybil_resistance_percent?: Percent | null;
}
export interface RoleAssignment {
  nodes: number[];
  role: Role;
}
export interface NodeCostParams {
  interval_operating_cost: Coin;
  profit_margin_percent: Percent;
}
export interface MixNode {
  host: string;
  http_api_port: number;
  identity_key: string;
  mix_port: number;
  sphinx_key: string;
  verloc_port: number;
  version: string;
}
export interface MixNodeConfigUpdate {
  host: string;
  http_api_port: number;
  mix_port: number;
  verloc_port: number;
  version: string;
}
export interface Gateway {
  clients_port: number;
  host: string;
  identity_key: string;
  location: string;
  mix_port: number;
  sphinx_key: string;
  version: string;
}
export interface GatewayConfigUpdate {
  clients_port: number;
  host: string;
  location: string;
  mix_port: number;
  version: string;
}
export interface NymNode {
  custom_http_port?: number | null;
  host: string;
  identity_key: string;
}
export interface NodeConfigUpdate {
  custom_http_port?: number | null;
  host?: string | null;
  restore_default_http_port?: boolean;
}
export interface NodeRewardingParameters {
  performance: Percent;
  work_factor: Decimal;
}
export type QueryMsg = {
  admin: {};
} | {
  get_contract_version: {};
} | {
  get_cw2_contract_version: {};
} | {
  get_rewarding_validator_address: {};
} | {
  get_state_params: {};
} | {
  get_state: {};
} | {
  get_current_nym_node_version: {};
} | {
  get_nym_node_version_history: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_rewarding_params: {};
} | {
  get_epoch_status: {};
} | {
  get_current_interval_details: {};
} | {
  get_mix_node_bonds: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_mix_nodes_detailed: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_unbonded_mix_nodes: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_unbonded_mix_nodes_by_owner: {
    limit?: number | null;
    owner: string;
    start_after?: number | null;
  };
} | {
  get_unbonded_mix_nodes_by_identity_key: {
    identity_key: string;
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_owned_mixnode: {
    address: string;
  };
} | {
  get_mixnode_details: {
    mix_id: number;
  };
} | {
  get_mixnode_rewarding_details: {
    mix_id: number;
  };
} | {
  get_stake_saturation: {
    mix_id: number;
  };
} | {
  get_unbonded_mix_node_information: {
    mix_id: number;
  };
} | {
  get_bonded_mixnode_details_by_identity: {
    mix_identity: string;
  };
} | {
  get_gateways: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  get_gateway_bond: {
    identity: string;
  };
} | {
  get_owned_gateway: {
    address: string;
  };
} | {
  get_preassigned_gateway_ids: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  get_nym_node_bonds_paged: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_nym_nodes_detailed_paged: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_unbonded_nym_node: {
    node_id: number;
  };
} | {
  get_unbonded_nym_nodes_paged: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_unbonded_nym_nodes_by_owner_paged: {
    limit?: number | null;
    owner: string;
    start_after?: number | null;
  };
} | {
  get_unbonded_nym_nodes_by_identity_key_paged: {
    identity_key: string;
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_owned_nym_node: {
    address: string;
  };
} | {
  get_nym_node_details: {
    node_id: number;
  };
} | {
  get_nym_node_details_by_identity_key: {
    node_identity: string;
  };
} | {
  get_node_rewarding_details: {
    node_id: number;
  };
} | {
  get_node_stake_saturation: {
    node_id: number;
  };
} | {
  get_role_assignment: {
    role: Role;
  };
} | {
  get_rewarded_set_metadata: {};
} | {
  get_node_delegations: {
    limit?: number | null;
    node_id: number;
    start_after?: string | null;
  };
} | {
  get_delegator_delegations: {
    delegator: string;
    limit?: number | null;
    start_after?: [number, string] | null;
  };
} | {
  get_delegation_details: {
    delegator: string;
    node_id: number;
    proxy?: string | null;
  };
} | {
  get_all_delegations: {
    limit?: number | null;
    start_after?: [number, string] | null;
  };
} | {
  get_pending_operator_reward: {
    address: string;
  };
} | {
  get_pending_node_operator_reward: {
    node_id: number;
  };
} | {
  get_pending_delegator_reward: {
    address: string;
    node_id: number;
    proxy?: string | null;
  };
} | {
  get_estimated_current_epoch_operator_reward: {
    estimated_performance: Percent;
    estimated_work?: Decimal | null;
    node_id: number;
  };
} | {
  get_estimated_current_epoch_delegator_reward: {
    address: string;
    estimated_performance: Percent;
    estimated_work?: Decimal | null;
    node_id: number;
  };
} | {
  get_pending_epoch_events: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_pending_interval_events: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  get_pending_epoch_event: {
    event_id: number;
  };
} | {
  get_pending_interval_event: {
    event_id: number;
  };
} | {
  get_number_of_pending_events: {};
} | {
  get_signing_nonce: {
    address: string;
  };
} | {
  get_key_rotation_state: {};
} | {
  get_key_rotation_id: {};
};
export interface MigrateMsg {
  unsafe_skip_state_updates?: boolean | null;
  vesting_contract_address?: string | null;
}
export interface AdminResponse {
  admin?: string | null;
}
export type Addr = string;
export interface PagedAllDelegationsResponse {
  delegations: Delegation[];
  start_next_after?: [number, string] | null;
}
export interface Delegation {
  amount: Coin;
  cumulative_reward_ratio: Decimal;
  height: number;
  node_id: number;
  owner: Addr;
  proxy?: Addr | null;
}
export interface MixnodeDetailsByIdentityResponse {
  identity_key: string;
  mixnode_details?: MixNodeDetails | null;
}
export interface MixNodeDetails {
  bond_information: MixNodeBond;
  pending_changes?: PendingMixNodeChanges;
  rewarding_details: NodeRewarding;
}
export interface MixNodeBond {
  bonding_height: number;
  is_unbonding: boolean;
  mix_id: number;
  mix_node: MixNode;
  original_pledge: Coin;
  owner: Addr;
  proxy?: Addr | null;
}
export interface PendingMixNodeChanges {
  cost_params_change?: number | null;
  pledge_change?: number | null;
}
export interface NodeRewarding {
  cost_params: NodeCostParams;
  delegates: Decimal;
  last_rewarded_epoch: number;
  operator: Decimal;
  total_unit_reward: Decimal;
  unique_delegations: number;
  unit_delegation: Decimal;
}
export interface ContractVersion {
  contract: string;
  version: string;
}
export interface ContractBuildInformation {
  build_timestamp: string;
  build_version: string;
  cargo_debug?: string;
  cargo_opt_level?: string;
  commit_branch: string;
  commit_sha: string;
  commit_timestamp: string;
  contract_name?: string;
  rustc_version: string;
}
export interface CurrentIntervalResponse {
  current_blocktime: number;
  interval: Interval;
  is_current_epoch_over: boolean;
  is_current_interval_over: boolean;
}
export interface Interval {
  current_epoch_id: number;
  current_epoch_start: string;
  epoch_length: Duration;
  epochs_in_interval: number;
  id: number;
  total_elapsed_epochs: number;
}
export interface CurrentNymNodeVersionResponse {
  version?: HistoricalNymNodeVersionEntry | null;
}
export interface HistoricalNymNodeVersionEntry {
  id: number;
  version_information: HistoricalNymNodeVersion;
}
export interface HistoricalNymNodeVersion {
  difference_since_genesis: TotalVersionDifference;
  introduced_at_height: number;
  semver: string;
}
export interface TotalVersionDifference {
  major: number;
  minor: number;
  patch: number;
  prerelease: number;
}
export interface NodeDelegationResponse {
  delegation?: Delegation | null;
  mixnode_still_bonded: boolean;
  node_still_bonded: boolean;
}
export interface PagedDelegatorDelegationsResponse {
  delegations: Delegation[];
  start_next_after?: [number, string] | null;
}
export type EpochState = "in_progress" | {
  rewarding: {
    final_node_id: number;
    last_rewarded: number;
  };
} | "reconciling_events" | {
  role_assignment: {
    next: Role;
  };
};
export interface EpochStatus {
  being_advanced_by: Addr;
  state: EpochState;
}
export interface EstimatedCurrentEpochRewardResponse {
  current_stake_value?: Coin | null;
  current_stake_value_detailed_amount?: Decimal | null;
  detailed_estimation_amount?: Decimal | null;
  estimation?: Coin | null;
  original_stake?: Coin | null;
}
export interface GatewayBondResponse {
  gateway?: GatewayBond | null;
  identity: string;
}
export interface GatewayBond {
  block_height: number;
  gateway: Gateway;
  owner: Addr;
  pledge_amount: Coin;
  proxy?: Addr | null;
}
export interface PagedGatewayResponse {
  nodes: GatewayBond[];
  per_page: number;
  start_next_after?: string | null;
}
export interface KeyRotationIdResponse {
  rotation_id: number;
}
export interface KeyRotationState {
  initial_epoch_id: number;
  validity_epochs: number;
}
export interface PagedMixnodeBondsResponse {
  nodes: MixNodeBond[];
  per_page: number;
  start_next_after?: number | null;
}
export interface PagedMixnodesDetailsResponse {
  nodes: MixNodeDetails[];
  per_page: number;
  start_next_after?: number | null;
}
export interface MixnodeDetailsResponse {
  mix_id: number;
  mixnode_details?: MixNodeDetails | null;
}
export interface MixnodeRewardingDetailsResponse {
  mix_id: number;
  rewarding_details?: NodeRewarding | null;
}
export interface PagedNodeDelegationsResponse {
  delegations: Delegation[];
  start_next_after?: string | null;
}
export interface NodeRewardingDetailsResponse {
  node_id: number;
  rewarding_details?: NodeRewarding | null;
}
export interface StakeSaturationResponse {
  current_saturation?: Decimal | null;
  node_id: number;
  uncapped_saturation?: Decimal | null;
}
export interface NumberOfPendingEventsResponse {
  epoch_events: number;
  interval_events: number;
}
export interface PagedNymNodeBondsResponse {
  nodes: NymNodeBond[];
  start_next_after?: number | null;
}
export interface NymNodeBond {
  bonding_height: number;
  is_unbonding: boolean;
  node: NymNode;
  node_id: number;
  original_pledge: Coin;
  owner: Addr;
}
export interface NodeDetailsResponse {
  details?: NymNodeDetails | null;
  node_id: number;
}
export interface NymNodeDetails {
  bond_information: NymNodeBond;
  pending_changes: PendingNodeChanges;
  rewarding_details: NodeRewarding;
}
export interface PendingNodeChanges {
  cost_params_change?: number | null;
  pledge_change?: number | null;
}
export interface NodeDetailsByIdentityResponse {
  details?: NymNodeDetails | null;
  identity_key: string;
}
export interface NymNodeVersionHistoryResponse {
  history: HistoricalNymNodeVersionEntry[];
  start_next_after?: number | null;
}
export interface PagedNymNodeDetailsResponse {
  nodes: NymNodeDetails[];
  start_next_after?: number | null;
}
export interface GatewayOwnershipResponse {
  address: Addr;
  gateway?: GatewayBond | null;
}
export interface MixOwnershipResponse {
  address: Addr;
  mixnode_details?: MixNodeDetails | null;
}
export interface NodeOwnershipResponse {
  address: Addr;
  details?: NymNodeDetails | null;
}
export interface PendingRewardResponse {
  amount_earned?: Coin | null;
  amount_earned_detailed?: Decimal | null;
  amount_staked?: Coin | null;
  mixnode_still_fully_bonded: boolean;
  node_still_fully_bonded: boolean;
}
export type PendingEpochEventKind = {
  delegate: {
    amount: Coin;
    node_id: number;
    owner: Addr;
    proxy?: Addr | null;
  };
} | {
  undelegate: {
    node_id: number;
    owner: Addr;
    proxy?: Addr | null;
  };
} | {
  nym_node_pledge_more: {
    amount: Coin;
    node_id: number;
  };
} | {
  mixnode_pledge_more: {
    amount: Coin;
    mix_id: number;
  };
} | {
  nym_node_decrease_pledge: {
    decrease_by: Coin;
    node_id: number;
  };
} | {
  mixnode_decrease_pledge: {
    decrease_by: Coin;
    mix_id: number;
  };
} | {
  unbond_mixnode: {
    mix_id: number;
  };
} | {
  unbond_nym_node: {
    node_id: number;
  };
} | {
  update_active_set: {
    update: ActiveSetUpdate;
  };
};
export interface PendingEpochEventResponse {
  event?: PendingEpochEventData | null;
  event_id: number;
}
export interface PendingEpochEventData {
  created_at: number;
  kind: PendingEpochEventKind;
}
export interface PendingEpochEventsResponse {
  events: PendingEpochEvent[];
  seconds_until_executable: number;
  start_next_after?: number | null;
}
export interface PendingEpochEvent {
  event: PendingEpochEventData;
  id: number;
}
export type PendingIntervalEventKind = {
  change_mix_cost_params: {
    mix_id: number;
    new_costs: NodeCostParams;
  };
} | {
  change_nym_node_cost_params: {
    new_costs: NodeCostParams;
    node_id: number;
  };
} | {
  update_rewarding_params: {
    update: IntervalRewardingParamsUpdate;
  };
} | {
  update_interval_config: {
    epoch_duration_secs: number;
    epochs_in_interval: number;
  };
};
export interface PendingIntervalEventResponse {
  event?: PendingIntervalEventData | null;
  event_id: number;
}
export interface PendingIntervalEventData {
  created_at: number;
  kind: PendingIntervalEventKind;
}
export interface PendingIntervalEventsResponse {
  events: PendingIntervalEvent[];
  seconds_until_executable: number;
  start_next_after?: number | null;
}
export interface PendingIntervalEvent {
  event: PendingIntervalEventData;
  id: number;
}
export interface PreassignedGatewayIdsResponse {
  ids: PreassignedId[];
  start_next_after?: string | null;
}
export interface PreassignedId {
  identity: string;
  node_id: number;
}
export interface RolesMetadataResponse {
  metadata: RewardedSetMetadata;
}
export interface RewardedSetMetadata {
  entry_gateway_metadata: RoleMetadata;
  epoch_id: number;
  exit_gateway_metadata: RoleMetadata;
  fully_assigned: boolean;
  layer1_metadata: RoleMetadata;
  layer2_metadata: RoleMetadata;
  layer3_metadata: RoleMetadata;
  standby_metadata: RoleMetadata;
}
export interface RoleMetadata {
  highest_id: number;
  num_nodes: number;
}
export interface RewardingParams {
  interval: IntervalRewardParams;
  rewarded_set: RewardedSetParams;
}
export interface IntervalRewardParams {
  active_set_work_factor: Decimal;
  epoch_reward_budget: Decimal;
  interval_pool_emission: Percent;
  reward_pool: Decimal;
  stake_saturation_point: Decimal;
  staking_supply: Decimal;
  staking_supply_scale_factor: Percent;
  sybil_resistance: Percent;
}
export type String = string;
export interface EpochAssignmentResponse {
  epoch_id: number;
  nodes: number[];
}
export type Uint32 = number;
export interface MixStakeSaturationResponse {
  current_saturation?: Decimal | null;
  mix_id: number;
  uncapped_saturation?: Decimal | null;
}
export interface ContractState {
  owner?: Addr | null;
  params: ContractStateParams;
  rewarding_denom: string;
  rewarding_validator_address: Addr;
  vesting_contract_address: Addr;
}
export interface ContractStateParams {
  config_score_params: ConfigScoreParams;
  delegations_params: DelegationsParams;
  operators_params: OperatorsParams;
}
export interface ConfigScoreParams {
  version_score_formula_params: VersionScoreFormulaParams;
  version_weights: OutdatedVersionWeights;
}
export interface OperatorsParams {
  interval_operating_cost: RangedValueForUint128;
  minimum_pledge: Coin;
  profit_margin: RangedValueForPercent;
}
export interface UnbondedMixnodeResponse {
  mix_id: number;
  unbonded_info?: UnbondedMixnode | null;
}
export interface UnbondedMixnode {
  identity_key: string;
  owner: Addr;
  proxy?: Addr | null;
  unbonding_height: number;
}
export interface PagedUnbondedMixnodesResponse {
  nodes: [number, UnbondedMixnode][];
  per_page: number;
  start_next_after?: number | null;
}
export interface UnbondedNodeResponse {
  details?: UnbondedNymNode | null;
  node_id: number;
}
export interface UnbondedNymNode {
  identity_key: string;
  node_id: number;
  owner: Addr;
  unbonding_height: number;
}
export interface PagedUnbondedNymNodesResponse {
  nodes: UnbondedNymNode[];
  start_next_after?: number | null;
}