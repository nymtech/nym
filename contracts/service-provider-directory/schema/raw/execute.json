{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "announce"
      ],
      "properties": {
        "announce": {
          "type": "object",
          "required": [
            "owner_signature",
            "service"
          ],
          "properties": {
            "owner_signature": {
              "$ref": "#/definitions/MessageSignature"
            },
            "service": {
              "$ref": "#/definitions/ServiceDetails"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "delete_id"
      ],
      "properties": {
        "delete_id": {
          "type": "object",
          "required": [
            "service_id"
          ],
          "properties": {
            "service_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "delete_nym_address"
      ],
      "properties": {
        "delete_nym_address": {
          "type": "object",
          "required": [
            "nym_address"
          ],
          "properties": {
            "nym_address": {
              "$ref": "#/definitions/NymAddress"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_deposit_required"
      ],
      "properties": {
        "update_deposit_required": {
          "type": "object",
          "required": [
            "deposit_required"
          ],
          "properties": {
            "deposit_required": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "MessageSignature": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      }
    },
    "NymAddress": {
      "description": "The types of addresses supported.",
      "oneOf": [
        {
          "description": "String representation of a nym address, which is of the form client_id.client_enc@gateway_id.",
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ServiceDetails": {
      "type": "object",
      "required": [
        "identity_key",
        "nym_address",
        "service_type"
      ],
      "properties": {
        "identity_key": {
          "description": "The identity key of the service.",
          "type": "string"
        },
        "nym_address": {
          "description": "The address of the service.",
          "allOf": [
            {
              "$ref": "#/definitions/NymAddress"
            }
          ]
        },
        "service_type": {
          "description": "The service type.",
          "allOf": [
            {
              "$ref": "#/definitions/ServiceType"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ServiceType": {
      "description": "The type of services provider supported",
      "type": "string",
      "enum": [
        "network_requester"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
