// Copyright 2020 Nym Technologies SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::auth_token::AuthToken;
use crate::types::BinaryRequest::ForwardSphinx;
use nymsphinx::addressing::nodes::{NymNodeRoutingAddress, NymNodeRoutingAddressError};
use nymsphinx::DestinationAddressBytes;
use serde::{Deserialize, Serialize};
use std::{
    convert::TryFrom,
    fmt::{self, Error, Formatter},
    net::SocketAddr,
};
use tokio_tungstenite::tungstenite::protocol::Message;

#[derive(Debug)]
pub enum GatewayRequestsError {
    IncorrectlyEncodedAddress,
    RequestOfInvalidSize(usize, usize),
}

// to use it as `std::error::Error`, and we don't want to just derive is because we want
// the message to convey meanings of the usize tuple in RequestOfInvalidSize.
impl fmt::Display for GatewayRequestsError {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error> {
        use GatewayRequestsError::*;
        match self {
            IncorrectlyEncodedAddress => write!(f, "address field was incorrectly encoded"),
            RequestOfInvalidSize(actual, expected) => write!(
                f,
                "received request had invalid size. (actual: {}, expected: {})",
                actual, expected
            ),
        }
    }
}

impl From<NymNodeRoutingAddressError> for GatewayRequestsError {
    fn from(_: NymNodeRoutingAddressError) -> Self {
        GatewayRequestsError::IncorrectlyEncodedAddress
    }
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "type", rename_all = "camelCase")]
pub enum ClientControlRequest {
    Authenticate { address: String, token: String },
    Register { address: String },
}

impl ClientControlRequest {
    pub fn new_authenticate(address: DestinationAddressBytes, token: AuthToken) -> Self {
        ClientControlRequest::Authenticate {
            address: address.to_base58_string(),
            token: token.to_base58_string(),
        }
    }

    pub fn new_register(address: DestinationAddressBytes) -> Self {
        ClientControlRequest::Register {
            address: address.to_base58_string(),
        }
    }
}

impl Into<Message> for ClientControlRequest {
    fn into(self) -> Message {
        // it should be safe to call `unwrap` here as the message is generated by the server
        // so if it fails (and consequently panics) it's a bug that should be resolved
        let str_req = serde_json::to_string(&self).unwrap();
        Message::Text(str_req)
    }
}

impl TryFrom<String> for ClientControlRequest {
    type Error = serde_json::Error;

    fn try_from(msg: String) -> Result<Self, Self::Error> {
        serde_json::from_str(&msg)
    }
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "type", rename_all = "camelCase")]
pub enum ServerResponse {
    Authenticate { status: bool },
    Register { token: String },
    Send { status: bool },
    Error { message: String },
}

impl ServerResponse {
    pub fn new_error<S: Into<String>>(msg: S) -> Self {
        ServerResponse::Error {
            message: msg.into(),
        }
    }

    pub fn is_error(&self) -> bool {
        match self {
            ServerResponse::Error { .. } => true,
            _ => false,
        }
    }

    pub fn implies_successful_authentication(&self) -> bool {
        match self {
            ServerResponse::Authenticate { status, .. } => *status,
            ServerResponse::Register { .. } => true,
            _ => false,
        }
    }
}

impl Into<Message> for ServerResponse {
    fn into(self) -> Message {
        // it should be safe to call `unwrap` here as the message is generated by the server
        // so if it fails (and consequently panics) it's a bug that should be resolved
        let str_res = serde_json::to_string(&self).unwrap();
        Message::Text(str_res)
    }
}

impl TryFrom<String> for ServerResponse {
    type Error = serde_json::Error;

    fn try_from(msg: String) -> Result<Self, serde_json::Error> {
        serde_json::from_str(&msg)
    }
}

pub enum BinaryRequest {
    ForwardSphinx { address: SocketAddr, data: Vec<u8> },
}

impl BinaryRequest {
    pub fn try_from_bytes(raw_req: &[u8]) -> Result<Self, GatewayRequestsError> {
        // right now there's only a single option possible which significantly simplifies the logic
        // if we decided to allow for more 'binary' messages, the API wouldn't need to change
        let address = NymNodeRoutingAddress::try_from_bytes(&raw_req)?;
        let addr_offset = address.bytes_min_len();

        if raw_req[addr_offset..].len() != nymsphinx::PACKET_SIZE {
            Err(GatewayRequestsError::RequestOfInvalidSize(
                raw_req[addr_offset..].len(),
                nymsphinx::PACKET_SIZE,
            ))
        } else {
            Ok(ForwardSphinx {
                address: address.into(),
                data: raw_req[addr_offset..].into(),
            })
        }
    }

    pub fn into_bytes(self) -> Vec<u8> {
        match self {
            BinaryRequest::ForwardSphinx { address, data } => {
                // TODO: using intermediate `NymNodeRoutingAddress` here is just temporary, because
                // it happens to do exactly what we needed, but we don't really want to be
                // dependant on what it does
                let wrapped_address = NymNodeRoutingAddress::from(address);
                wrapped_address
                    .as_bytes()
                    .into_iter()
                    .chain(data.into_iter())
                    .collect()
            }
        }
    }

    pub fn new_forward_request(address: SocketAddr, data: Vec<u8>) -> BinaryRequest {
        BinaryRequest::ForwardSphinx { address, data }
    }
}

impl Into<Message> for BinaryRequest {
    fn into(self) -> Message {
        Message::Binary(self.into_bytes())
    }
}

// TODO: tests...
