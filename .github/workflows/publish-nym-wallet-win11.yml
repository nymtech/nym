name: publish-nym-wallet-win11
on:
  workflow_dispatch:
    inputs:
      sign:
        description: "Sign this build using SSL.com. Signing is billed per signature so be careful"
        required: false
        type: boolean
        default: true
  release:
    types: [created]

defaults:
  run:
    working-directory: nym-wallet

jobs:
  publish-tauri:
    if: ${{ (startsWith(github.ref, 'refs/tags/nym-wallet-') && github.event_name == 'release') || github.event_name == 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        platform: [custom-windows-11]
    runs-on: ${{ matrix.platform }}

    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_date: ${{ fromJSON(steps.create-release.outputs.assets)[0].created_at }}
      version: ${{ steps.release-info.outputs.version }}
      filename: ${{ steps.release-info.outputs.filename }}
      file_hash: ${{ steps.release-info.outputs.file_hash }}

    steps:
      - name: Clean up first
        continue-on-error: true
        working-directory: .
        run: |
          cd ..
          del /s /q /A:H nym
          rmdir /s /q nym

      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Install yq
        run: |
          winget list MikeFarah.yq || winget install --disable-interactivity --id MikeFarah.yq

      - name: Node
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Create env file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: '.env'
          encodedString: ${{ secrets.WALLET_ADMIN_ADDRESS }}

      # # Standard certificate import (used when not using SSL.com)
      # - name: Import signing certificate
      #   if: ${{ !inputs.sign }}
      #   env:
      #     WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      #     WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      #   run: |
      #     New-Item -ItemType directory -Path certificate
      #     Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
      #     certutil -decode certificate/tempCert.txt certificate/certificate.pfx
      #     Remove-Item -path certificate -include tempCert.txt
      #     Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      # SSL.com certificate handling (from VPN workflow)
      - name: Download EV CodeSignTool from ssl.com
        if: ${{ inputs.sign }}
        shell: bash
        run: |
          curl -L0 https://www.ssl.com/download/codesigntool-for-linux-and-macos/ -o codesigntool.zip
          unzip codesigntool.zip

      - name: Get EV certificate credential id
        if: ${{ inputs.sign }}
        id: get_credential_ids
        shell: bash
        run: |
          echo "SSL_COM_CREDENTIAL_ID=$(./CodeSignTool.sh get_credential_ids -username=${{ secrets.SSL_COM_USERNAME }} -password=${{ secrets.SSL_COM_PASSWORD }} | sed -n '1!p' | sed 's/- //')" >> "$GITHUB_OUTPUT"

      # Add custom sign command to tauri.conf.json for SSL.com signing
      - name: Add custom sign command to tauri.conf.json
        if: ${{ inputs.sign }}
        shell: bash
        run: |
          yq eval --inplace '.bundle.windows +=
          {
            "signCommand": {
              "cmd": "C:\Program Files\Git\bin\bash.EXE",
              "args": [
                "/c/actions-runner/_work/nym/nym/nym-wallet/CodeSignTool.sh",
                "sign",
                "-username ${{ secrets.SSL_COM_USERNAME }}",
                "-password ${{ secrets.SSL_COM_PASSWORD }}",
                "-credential_id ${{ steps.get_credential_ids.outputs.SSL_COM_CREDENTIAL_ID }}",
                "-totp_secret ${{ secrets.SSL_COM_TOTP_SECRET }}",
                "-program_name NymWallet",
                "-input_file_path",
                "%1",
                "-override"
              ]
            }
          }' tauri.conf.json

      - name: Install project dependencies
        shell: bash
        run: cd .. && yarn --network-timeout 100000

      - name: Install app dependencies
        shell: bash
        run: yarn --network-timeout 100000

      - name: Build and sign it
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # WINDOWS_CERTIFICATE: ${{ !inputs.sign && secrets.WINDOWS_CERTIFICATE }}
          # WINDOWS_CERTIFICATE_PASSWORD: ${{ !inputs.sign && secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          # Tauri v2 signing variables
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          SSL_COM_USERNAME: ${{ inputs.sign && secrets.SSL_COM_USERNAME }}
          SSL_COM_PASSWORD: ${{ inputs.sign && secrets.SSL_COM_PASSWORD }}
          SSL_COM_CREDENTIAL_ID: ${{ inputs.sign && steps.get_credential_ids.outputs.SSL_COM_CREDENTIAL_ID }}
          SSL_COM_TOTP_SECRET: ${{ inputs.sign && secrets.SSL_COM_TOTP_SECRET }}
        run: yarn build

      - name: Check bundle directory
        run: |
          echo "Checking bundle directory structure"
          ls -la target/release/bundle || echo "Bundle directory not found"
          if [ -d "target/release/bundle/msi" ]; then
            echo "MSI bundle directory exists, checking contents:"
            ls -la target/release/bundle/msi
          else
            echo "MSI bundle directory not found, checking alternatives:"
            find target/release/bundle -type d -name "*msi*" -o -name "*MSI*" || echo "No MSI directories found"
            find target/release/bundle -name "*.msi" || echo "No MSI files found"
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nym-wallet.msi
          path: |
            nym-wallet/target/release/bundle/msi/*.msi
            nym-wallet/target/release/bundle/*/nym-wallet*.msi
          retention-days: 30

      - id: create-release
        name: Upload to release based on tag name
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release'
        with:
          files: |
            nym-wallet/target/release/bundle/msi/*.msi
            nym-wallet/target/release/bundle/msi/*.msi.zip*
            nym-wallet/target/release/bundle/*/nym-wallet*.msi
            nym-wallet/target/release/bundle/*/nym-wallet*.msi.zip*

      - name: Find MSI path for deployment
        id: find-msi
        shell: bash
        run: |
          MSI_FILE=$(find target/release/bundle -name "*.msi" | head -n 1)
          if [ -n "$MSI_FILE" ]; then
            echo "Found MSI file: $MSI_FILE"
            echo "msi_path=$MSI_FILE" >> $GITHUB_OUTPUT
          else
            echo "WARNING: No MSI file found for deployment!"
            echo "msi_path=target/release/bundle/msi/nym-wallet_1.*.msi" >> $GITHUB_OUTPUT
          fi

      - name: Deploy artifacts to CI www
        continue-on-error: true
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.CI_WWW_SSH_PRIVATE_KEY }}
          ARGS: "-avzr"
          SOURCE: ${{ steps.find-msi.outputs.msi_path }}
          REMOTE_HOST: ${{ secrets.CI_WWW_REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.CI_WWW_REMOTE_USER }}
          TARGET: ${{ secrets.CI_WWW_REMOTE_TARGET }}/builds/${{ github.ref_name }}/nym-wallet
          EXCLUDE: "/dist/, /node_modules/"            

  push-release-data:
    if: ${{ (startsWith(github.ref, 'refs/tags/nym-wallet-') && github.event_name == 'release') || github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/release-calculate-hash.yml
    needs: publish-tauri
    with:
      release_tag: ${{ github.ref_name }}
    secrets: inherit