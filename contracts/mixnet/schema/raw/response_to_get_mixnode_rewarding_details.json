{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MixnodeRewardingDetailsResponse",
  "description": "Response containing rewarding information of a mixnode with the provided id.",
  "type": "object",
  "required": [
    "mix_id"
  ],
  "properties": {
    "mix_id": {
      "description": "Id of the requested mixnode.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "rewarding_details": {
      "description": "If there exists a mixnode with the provided id, this field contains its rewarding information.",
      "anyOf": [
        {
          "$ref": "#/definitions/NodeRewarding"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "NodeCostParams": {
      "description": "The cost parameters, or the cost function, defined for the particular mixnode that influences how the rewards should be split between the node operator and its delegators.",
      "type": "object",
      "required": [
        "interval_operating_cost",
        "profit_margin_percent"
      ],
      "properties": {
        "interval_operating_cost": {
          "description": "Operating cost of the associated node per the entire interval.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "profit_margin_percent": {
          "description": "The profit margin of the associated node, i.e. the desired percent of the reward to be distributed to the operator.",
          "allOf": [
            {
              "$ref": "#/definitions/Percent"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "NodeRewarding": {
      "type": "object",
      "required": [
        "cost_params",
        "delegates",
        "last_rewarded_epoch",
        "operator",
        "total_unit_reward",
        "unique_delegations",
        "unit_delegation"
      ],
      "properties": {
        "cost_params": {
          "description": "Information provided by the operator that influence the cost function.",
          "allOf": [
            {
              "$ref": "#/definitions/NodeCostParams"
            }
          ]
        },
        "delegates": {
          "description": "Total delegation and compounded reward earned by all node delegators.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "last_rewarded_epoch": {
          "description": "Marks the epoch when this node was last rewarded so that we wouldn't accidentally attempt to reward it multiple times in the same epoch.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "operator": {
          "description": "Total pledge and compounded reward earned by the node operator.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "total_unit_reward": {
          "description": "Cumulative reward earned by the \"unit delegation\" since the block 0.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "unique_delegations": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "unit_delegation": {
          "description": "Value of the theoretical \"unit delegation\" that has delegated to this node at block 0.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Percent": {
      "description": "Percent represents a value between 0 and 100% (i.e. between 0.0 and 1.0)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
