{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UnbondedMixnodeResponse",
  "description": "Response containing basic information of an unbonded mixnode with the provided id.",
  "type": "object",
  "required": [
    "mix_id"
  ],
  "properties": {
    "mix_id": {
      "description": "Id of the requested mixnode.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "unbonded_info": {
      "description": "If there existed a mixnode with the provided id, this field contains its basic information.",
      "anyOf": [
        {
          "$ref": "#/definitions/UnbondedMixnode"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "UnbondedMixnode": {
      "description": "Basic information of a node that used to be part of the mix network but has already unbonded.",
      "type": "object",
      "required": [
        "identity_key",
        "owner",
        "unbonding_height"
      ],
      "properties": {
        "identity_key": {
          "description": "Base58-encoded ed25519 EdDSA public key.",
          "type": "string"
        },
        "owner": {
          "description": "Address of the owner of this mixnode.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "proxy": {
          "description": "Entity who bonded this mixnode on behalf of the owner. If exists, it's most likely the address of the vesting contract.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "unbonding_height": {
          "description": "Block height at which this mixnode has unbonded.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}
