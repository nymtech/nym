import type {
  DescribedNodeType,
  NodeDescription,
  NodeGeoData,
  NodeRewarding,
  NymNodeData,
  U32,
} from "@/client";
import { nymNodesOptions } from "@/client/@tanstack/react-query.gen";
import { useQueryContext } from "@/context/queryContext";
import type { Pagination } from "@/hooks/types";
import { keepPreviousData, useQuery } from "@tanstack/react-query";

// TODO: how to re-use autogenerated subtype
export type NymNode = {
  accepted_tnc: boolean;
  bonded: boolean;
  bonding_address?: string | null;
  description: NodeDescription;
  geoip?: null | NodeGeoData;
  identity_key: string;
  ip_address: string;
  node_id: U32;
  node_type: DescribedNodeType;
  original_pledge: number;
  rewarding_details?: null | NodeRewarding;
  self_description: NymNodeData;
  total_stake: string;
  uptime: number;
};

export const useNymNodes = (props?: Pagination) => {
  const { client } = useQueryContext();
  const { pageIndex = 0, pageSize = 10 } = props || {};
  const key = "nym-nodes";

  const query = useQuery({
    ...nymNodesOptions({
      client,
      query: {
        page: pageIndex,
        size: pageSize,
      },
    }),
    placeholderData: keepPreviousData,
  });

  return {
    key,
    query,
  };
};
