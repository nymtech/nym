import expect from 'expect';
import ValidatorClient from '../../index';
import { amountDemon, Delegations, DelegatorTimes, Mixnode, OriginalVestingDetails, startTime, VestingAccountDetails, vestingAccountsPaged, VestingCoinAccounts } from '../expectedResponses';

const dotenv = require('dotenv');

dotenv.config();

describe.only('Vesting queries', () => {
  let client: ValidatorClient;

  beforeEach(async () => {
    client = await ValidatorClient.connectForQuery(
      process.env.rpcAddress || '',
      process.env.validatorAddress || '',
      process.env.prefix || '',
      process.env.mixnetContractAddress || '',
      process.env.vestingContractAddress || '',
      process.env.denom || '',
    );
  });

  it('can query for contract version', async () => {
    const contract = await client.getVestingContractVersion();
    expect(contract).toBeTruthy();
  });

  // TODO see if we can use AccountEntry type here instead
  it('can get all accounts paged', async () => {
    const accounts = await client.getVestingAccountsPaged();
    expect(Object.keys(accounts)).toEqual(Object.keys(vestingAccountsPaged));
    expect(accounts).toBeTruthy();
  });

  it('can get coins for all accounts paged', async () => {
    const accounts = await client.getVestingAmountsAccountsPaged();
    expect(Object.keys(accounts)).toEqual(Object.keys(VestingCoinAccounts));
    expect(accounts).toBeTruthy();
  });

  it('can get locked tokens for an account', async () => {
    const locked = await client.getLockedTokens("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    expect(Object.keys(locked)).toEqual(Object.keys(amountDemon));
    expect(locked).toBeTruthy();
  });

  it('can get spendable tokens for an account', async () => {
    const spendable = await client.getSpendableTokens("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    expect(Object.keys(spendable)).toEqual(Object.keys(amountDemon));
    expect(spendable).toBeTruthy();
  });

  it('can get vested tokens for an account', async () => {
    const vested = await client.getVestedTokens("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    expect(Object.keys(vested)).toEqual(Object.keys(amountDemon));
    expect(vested).toBeTruthy();
  });

  it('can get vesting tokens for an account', async () => {
    const vesting = await client.getVestingTokens("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    expect(Object.keys(vesting)).toEqual(Object.keys(amountDemon));
    expect(vesting).toBeTruthy();
  });

  // TODO fix this 
  it.skip('can get start time of an account', async () => {
    const time = await client.getStartTime("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    console.log("----------------")
    console.log(time)
    expect(Object.keys(time)).toEqual(Object.keys(startTime));
    expect(time).toBeTruthy();
  });

  it('can get account original vesting details', async () => {
    const original = await client.getOriginalVestingDetails("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    expect(Object.keys(original)).toEqual(Object.keys(OriginalVestingDetails));
    expect(original).toBeTruthy();
  });

  it('can get historic vesting staking rewards', async () => {
    const rewards = await client.getHistoricStakingRewards("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    expect(Object.keys(rewards)).toEqual(Object.keys(amountDemon));
    expect(rewards).toBeTruthy();
  });

  // TODO VestingAccountInfo autogenerated file needs to be edited/fixed as it's wrong
  it.skip('can get account details', async () => {
    const account = await client.getAccountDetails("n14juvj7llvx8eppypnqj6xlrgwss9wfrcuy0nkv");
    expect(Object.keys(account)).toEqual(Object.keys(VestingAccountDetails));
    expect(account).toBeTruthy();
  });

  // TODO add option for if account has no mixnode and expected is null 
  it('can get mixnode', async () => {
    const mixnode = await client.getMixnode("n1z93z44vf8ssvdhujjvxcj4rd5e3lz0l60wdk70");
    expect(Object.keys(mixnode)).toEqual(Object.keys(Mixnode));
    expect(mixnode).toBeTruthy();
  });

  // TODO nyxd query returns value in different order to this test, understand why
  it('can get delegations times', async () => {
    const delegation = await client.getDelegationTimes(79, "n1z93z44vf8ssvdhujjvxcj4rd5e3lz0l60wdk70");
    console.log("---")
    console.log(delegation)
    console.log("---")
    expect(Object.keys(delegation)).toEqual(Object.keys(DelegatorTimes));
    expect(delegation).toBeTruthy();
  });

  it.only('can get all delegations', async () => {
    const delegation = await client.getAllDelegations();
    expect(Object.keys(delegation)).toEqual(Object.keys(Delegations));
    expect(delegation).toBeTruthy();
  });
});
