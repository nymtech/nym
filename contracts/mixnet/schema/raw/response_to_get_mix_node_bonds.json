{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PagedMixnodeBondsResponse",
  "description": "Response containing paged list of all mixnode bonds in the contract.",
  "type": "object",
  "required": [
    "nodes",
    "per_page"
  ],
  "properties": {
    "nodes": {
      "description": "The mixnode bond information present in the contract.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MixNodeBond"
      }
    },
    "per_page": {
      "description": "Maximum number of entries that could be included in a response. `per_page <= nodes.len()`",
      "type": "integer",
      "format": "uint",
      "minimum": 0.0
    },
    "start_next_after": {
      "description": "Field indicating paging information for the following queries if the caller wishes to get further entries.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "MixNode": {
      "description": "Information provided by the node operator during bonding that are used to allow other entities to use the services of this node.",
      "type": "object",
      "required": [
        "host",
        "http_api_port",
        "identity_key",
        "mix_port",
        "sphinx_key",
        "verloc_port",
        "version"
      ],
      "properties": {
        "host": {
          "description": "Network address of this mixnode, for example 1.1.1.1 or foo.mixnode.com",
          "type": "string"
        },
        "http_api_port": {
          "description": "Port used by this mixnode for its http(s) API",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "identity_key": {
          "description": "Base58-encoded ed25519 EdDSA public key.",
          "type": "string"
        },
        "mix_port": {
          "description": "Port used by this mixnode for listening for mix packets.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "sphinx_key": {
          "description": "Base58-encoded x25519 public key used for sphinx key derivation.",
          "type": "string"
        },
        "verloc_port": {
          "description": "Port used by this mixnode for listening for verloc requests.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "version": {
          "description": "The self-reported semver version of this mixnode.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "MixNodeBond": {
      "description": "Basic mixnode information provided by the node operator.",
      "type": "object",
      "required": [
        "bonding_height",
        "is_unbonding",
        "mix_id",
        "mix_node",
        "original_pledge",
        "owner"
      ],
      "properties": {
        "bonding_height": {
          "description": "Block height at which this mixnode has been bonded.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "is_unbonding": {
          "description": "Flag to indicate whether this node is in the process of unbonding, that will conclude upon the epoch finishing.",
          "type": "boolean"
        },
        "mix_id": {
          "description": "Unique id assigned to the bonded mixnode.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "mix_node": {
          "description": "Information provided by the operator for the purposes of bonding.",
          "allOf": [
            {
              "$ref": "#/definitions/MixNode"
            }
          ]
        },
        "original_pledge": {
          "description": "Original amount pledged by the operator of this node.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "owner": {
          "description": "Address of the owner of this mixnode.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "proxy": {
          "description": "Entity who bonded this mixnode on behalf of the owner. If exists, it's most likely the address of the vesting contract.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
