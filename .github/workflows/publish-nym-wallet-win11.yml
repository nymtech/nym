name: publish-nym-wallet-win11
on:
  workflow_dispatch:
    inputs:
      sign:
        description: "Sign this build using SSL.com. Signing is billed per signature so be careful"
        required: false
        type: boolean
        default: true
  release:
    types: [created]

defaults:
  run:
    working-directory: nym-wallet

jobs:
  publish-tauri:
    if: ${{ (startsWith(github.ref, 'refs/tags/nym-wallet-') && github.event_name == 'release') || github.event_name == 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        platform: [custom-windows-11]
    runs-on: ${{ matrix.platform }}

    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_date: ${{ fromJSON(steps.create-release.outputs.assets)[0].created_at }}
      version: ${{ steps.release-info.outputs.version }}
      filename: ${{ steps.release-info.outputs.filename }}
      file_hash: ${{ steps.release-info.outputs.file_hash }}

    steps:
      - name: Clean up first
        continue-on-error: true
        working-directory: .
        run: |
          cd ..
          del /s /q /A:H nym
          rmdir /s /q nym

      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Install yq
        run: |
          winget list MikeFarah.yq || winget install --disable-interactivity --id MikeFarah.yq

      - name: Node
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Create env file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: '.env'
          encodedString: ${{ secrets.WALLET_ADMIN_ADDRESS }}

      # Find the location of the src-tauri directory
      - name: Locate src-tauri directory
        shell: bash
        run: |
          echo "Looking for src-tauri directory..."
          if [ -d "src-tauri" ]; then
            echo "Found src-tauri directory"
            echo "TAURI_SRC_DIR=src-tauri" >> $GITHUB_ENV
            echo "TAURI_CONF_PATH=src-tauri/tauri.conf.json" >> $GITHUB_ENV
          else
            echo "src-tauri directory not found, using current directory"
            echo "TAURI_SRC_DIR=." >> $GITHUB_ENV
            echo "TAURI_CONF_PATH=tauri.conf.json" >> $GITHUB_ENV
          fi

      # SSL.com certificate handling specifically for Windows
      - name: Download EV CodeSignTool from ssl.com - Windows
        if: ${{ inputs.sign }}
        shell: powershell
        run: |
          # Check and navigate to src-tauri directory if it exists
          $srcTauriPath = "src-tauri"
          if (Test-Path $srcTauriPath) {
            Set-Location $srcTauriPath
            Write-Output "Changed to src-tauri directory"
          }
          
          Write-Output "Downloading CodeSignTool..."
          Invoke-WebRequest -Uri "https://www.ssl.com/download/codesigntool-for-windows/" -OutFile "codesigntool.zip"
          
          Write-Output "Extracting CodeSignTool..."
          Expand-Archive -Path "codesigntool.zip" -DestinationPath "." -Force
          
          if (Test-Path "CodeSignTool.bat") {
            Write-Output "CodeSignTool.bat found!"
            Get-ChildItem -Path "CodeSignTool.bat"
          } else {
            Write-Output "CodeSignTool.bat not found! Listing directory contents:"
            Get-ChildItem -Path "."
          }
          
          $toolPath = Join-Path -Path (Get-Location) -ChildPath "CodeSignTool.bat"
          Write-Output "Tool path: $toolPath"
          $toolPath | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Get EV certificate credential id
        if: ${{ inputs.sign }}
        id: get_credential_ids
        shell: powershell
        run: |
          $srcTauriPath = "src-tauri"
          if (Test-Path $srcTauriPath) {
            Set-Location $srcTauriPath
            Write-Output "Changed to src-tauri directory"
          }
          
          Write-Output "Getting credential ID..."
          $credentialOutput = & .\CodeSignTool.bat get_credential_ids -username=${{ secrets.SSL_COM_USERNAME }} -password=${{ secrets.SSL_COM_PASSWORD }}
          Write-Output "Credential output: $credentialOutput"
          
          $credentialId = ($credentialOutput | Select-String -Pattern "- (.+)" | ForEach-Object { $_.Matches.Groups[1].Value }) -replace " ", ""
          Write-Output "Credential ID: $credentialId"
          
          "SSL_COM_CREDENTIAL_ID=$credentialId" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
          $toolPath = Join-Path -Path (Get-Location) -ChildPath "CodeSignTool.bat"
          "CODESIGNTOOL_PATH=$toolPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # Add custom sign command to tauri.conf.json for SSL.com signing
      - name: Add custom sign command to tauri.conf.json
        if: ${{ inputs.sign }}
        shell: powershell
        run: |
          # Find and update tauri.conf.json
          $configPath = $env:TAURI_CONF_PATH
          Write-Output "Config path: $configPath"
          
          if (Test-Path $configPath) {
            Write-Output "Found Tauri config file"
          } else {
            Write-Output "Tauri config file not found!"
            Get-ChildItem -Recurse -Path "." -Filter "tauri.conf.json" | ForEach-Object { Write-Output $_.FullName }
            exit 1
          }
          
          $toolPath = ${{ steps.get_credential_ids.outputs.CODESIGNTOOL_PATH }}
          Write-Output "CodeSignTool path: $toolPath"
          
          $escapedToolPath = $toolPath -replace '\\', '\\'
          Write-Output "Escaped tool path: $escapedToolPath"
          
          yq eval --inplace '.bundle.windows += {
            "signCommand": {
              "cmd": "' + $escapedToolPath + '",
              "args": [
                "sign",
                "-username", "${{ secrets.SSL_COM_USERNAME }}",
                "-password", "${{ secrets.SSL_COM_PASSWORD }}",
                "-credential_id", "${{ steps.get_credential_ids.outputs.SSL_COM_CREDENTIAL_ID }}",
                "-totp_secret", "${{ secrets.SSL_COM_TOTP_SECRET }}",
                "-program_name", "NymWallet",
                "-input_file_path", "%1",
                "-override"
              ]
            }
          }' $configPath
          
          $config = Get-Content $configPath
          if ($config -match "signCommand") {
            Write-Output "Successfully updated tauri.conf.json with signing command"
          } else {
            Write-Output "Failed to add signCommand to tauri.conf.json"
            exit 1
          }

      - name: Install project dependencies
        shell: bash
        run: cd .. && yarn --network-timeout 100000

      - name: Install app dependencies
        shell: bash
        run: yarn --network-timeout 100000

      - name: Build and sign it
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Tauri v2 signing variables
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # SSL.com signing variables
          SSL_COM_USERNAME: ${{ inputs.sign && secrets.SSL_COM_USERNAME }}
          SSL_COM_PASSWORD: ${{ inputs.sign && secrets.SSL_COM_PASSWORD }}
          SSL_COM_CREDENTIAL_ID: ${{ inputs.sign && steps.get_credential_ids.outputs.SSL_COM_CREDENTIAL_ID }}
          SSL_COM_TOTP_SECRET: ${{ inputs.sign && secrets.SSL_COM_TOTP_SECRET }}
        run: |
          yarn build
          
          # List build artifacts for debugging
          find . -name "*.msi" -type f
          find . -name "*.exe" -type f

      - name: Check bundle directory
        shell: bash
        run: |
          echo "Checking bundle directory structure"
          
          find . -path "*/bundle" -type d | while read dir; do
            echo "Found bundle directory: $dir"
            ls -la "$dir" || echo "Failed to list bundle directory contents"
            
            find "$dir" -type d | while read subdir; do
              echo "Subdirectory: $subdir"
              ls -la "$subdir" || echo "Failed to list subdirectory contents"
            done
          done
          
          echo "Looking for MSI files:"
          find . -name "*.msi" -type f
          
          if [ -d "src-tauri/target/release/bundle" ]; then
            echo "BUNDLE_PATH=src-tauri/target/release/bundle" >> $GITHUB_ENV
          elif [ -d "target/release/bundle" ]; then
            echo "BUNDLE_PATH=target/release/bundle" >> $GITHUB_ENV
          else
            echo "Using dynamic bundle path detection"
            BUNDLE_DIR=$(find . -path "*/bundle" -type d | head -n 1)
            if [ -n "$BUNDLE_DIR" ]; then
              echo "BUNDLE_PATH=$BUNDLE_DIR" >> $GITHUB_ENV
            else
              echo "WARNING: Could not find bundle directory!"
              echo "BUNDLE_PATH=target/release/bundle" >> $GITHUB_ENV
            fi
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nym-wallet.msi
          path: |
            nym-wallet/${{ env.BUNDLE_PATH }}/msi/*.msi
            nym-wallet/${{ env.BUNDLE_PATH }}/*/nym-wallet*.msi
            nym-wallet/**/bundle/**/msi/*.msi
            nym-wallet/**/*.msi
          retention-days: 30

      - id: create-release
        name: Upload to release based on tag name
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release'
        with:
          files: |
            nym-wallet/${{ env.BUNDLE_PATH }}/msi/*.msi
            nym-wallet/${{ env.BUNDLE_PATH }}/msi/*.msi.zip*
            nym-wallet/${{ env.BUNDLE_PATH }}/*/nym-wallet*.msi
            nym-wallet/**/bundle/**/msi/*.msi
            nym-wallet/**/*.msi

      - name: Find MSI path for deployment
        id: find-msi
        shell: bash
        run: |
          MSI_FILE=$(find . -name "*.msi" -type f | head -n 1)
          if [ -n "$MSI_FILE" ]; then
            echo "Found MSI file: $MSI_FILE"
            echo "msi_path=$MSI_FILE" >> $GITHUB_OUTPUT
          else
            echo "WARNING: No MSI file found for deployment!"
            echo "msi_path=${{ env.BUNDLE_PATH }}/msi/nym-wallet*.msi" >> $GITHUB_OUTPUT
          fi

      - name: Deploy artifacts to CI www
        continue-on-error: true
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.CI_WWW_SSH_PRIVATE_KEY }}
          ARGS: "-avzr"
          SOURCE: ${{ steps.find-msi.outputs.msi_path }}
          REMOTE_HOST: ${{ secrets.CI_WWW_REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.CI_WWW_REMOTE_USER }}
          TARGET: ${{ secrets.CI_WWW_REMOTE_TARGET }}/builds/${{ github.ref_name }}/nym-wallet
          EXCLUDE: "/dist/, /node_modules/"            

  push-release-data:
    if: ${{ (startsWith(github.ref, 'refs/tags/nym-wallet-') && github.event_name == 'release') || github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/release-calculate-hash.yml
    needs: publish-tauri
    with:
      release_tag: ${{ github.ref_name }}
    secrets: inherit