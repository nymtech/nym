{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PendingIntervalEventResponse",
  "type": "object",
  "required": [
    "event_id"
  ],
  "properties": {
    "event": {
      "anyOf": [
        {
          "$ref": "#/definitions/PendingIntervalEventData"
        },
        {
          "type": "null"
        }
      ]
    },
    "event_id": {
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "IntervalRewardingParamsUpdate": {
      "type": "object",
      "properties": {
        "active_set_work_factor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "interval_pool_emission": {
          "anyOf": [
            {
              "$ref": "#/definitions/Percent"
            },
            {
              "type": "null"
            }
          ]
        },
        "reward_pool": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "rewarded_set_size": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "staking_supply": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "staking_supply_scale_factor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Percent"
            },
            {
              "type": "null"
            }
          ]
        },
        "sybil_resistance_percent": {
          "anyOf": [
            {
              "$ref": "#/definitions/Percent"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MixNodeCostParams": {
      "type": "object",
      "required": [
        "interval_operating_cost",
        "profit_margin_percent"
      ],
      "properties": {
        "interval_operating_cost": {
          "description": "Operating cost of the associated mixnode per the entire interval.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "profit_margin_percent": {
          "$ref": "#/definitions/Percent"
        }
      },
      "additionalProperties": false
    },
    "PendingIntervalEventData": {
      "type": "object",
      "required": [
        "created_at",
        "kind"
      ],
      "properties": {
        "created_at": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "kind": {
          "$ref": "#/definitions/PendingIntervalEventKind"
        }
      },
      "additionalProperties": false
    },
    "PendingIntervalEventKind": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "change_mix_cost_params"
          ],
          "properties": {
            "change_mix_cost_params": {
              "type": "object",
              "required": [
                "mix_id",
                "new_costs"
              ],
              "properties": {
                "mix_id": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "new_costs": {
                  "$ref": "#/definitions/MixNodeCostParams"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_rewarding_params"
          ],
          "properties": {
            "update_rewarding_params": {
              "type": "object",
              "required": [
                "update"
              ],
              "properties": {
                "update": {
                  "$ref": "#/definitions/IntervalRewardingParamsUpdate"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_interval_config"
          ],
          "properties": {
            "update_interval_config": {
              "type": "object",
              "required": [
                "epoch_duration_secs",
                "epochs_in_interval"
              ],
              "properties": {
                "epoch_duration_secs": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "epochs_in_interval": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Percent": {
      "description": "Percent represents a value between 0 and 100% (i.e. between 0.0 and 1.0)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
