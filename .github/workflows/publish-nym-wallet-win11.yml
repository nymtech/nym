name: publish-nym-wallet-win11
on:
  workflow_dispatch:
    inputs:
      sign:
        description: "Sign this build using SSL.com. Signing is billed per signature so be careful"
        required: false
        type: boolean
        default: true
  release:
    types: [created]

defaults:
  run:
    working-directory: nym-wallet

jobs:
  publish-tauri:
    if: ${{ (startsWith(github.ref, 'refs/tags/nym-wallet-') && github.event_name == 'release') || github.event_name == 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        platform: [custom-windows-11]
    runs-on: ${{ matrix.platform }}

    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_date: ${{ fromJSON(steps.create-release.outputs.assets)[0].created_at }}
      version: ${{ steps.release-info.outputs.version }}
      filename: ${{ steps.release-info.outputs.filename }}
      file_hash: ${{ steps.release-info.outputs.file_hash }}

    steps:
      - name: Clean up first
        continue-on-error: true
        working-directory: .
        run: |
          cd ..
          del /s /q /A:H nym
          rmdir /s /q nym

      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Install yq
        run: |
          winget list MikeFarah.yq || winget install --disable-interactivity --id MikeFarah.yq

      - name: Node
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Create env file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: '.env'
          encodedString: ${{ secrets.WALLET_ADMIN_ADDRESS }}

      # Find the location of tauri.conf.json for debugging
      - name: Locate tauri.conf.json
        shell: bash
        run: |
          echo "Looking for tauri.conf.json file..."
          find . -name "tauri.conf.json" -type f
          
          if [ -f "src-tauri/tauri.conf.json" ]; then
            echo "Found in src-tauri directory"
            echo "TAURI_CONFIG_DIR=src-tauri" >> $GITHUB_ENV
          else
            echo "Not found in src-tauri, using root directory"
            echo "TAURI_CONFIG_DIR=." >> $GITHUB_ENV
          fi

      # SSL.com certificate handling
      - name: Download EV CodeSignTool from ssl.com
        if: ${{ inputs.sign }}
        shell: bash
        run: |
          # Navigate to the directory with tauri.conf.json
          cd ${{ env.TAURI_CONFIG_DIR }} || true
          
          # Download and unzip the tool
          curl -L0 https://www.ssl.com/download/codesigntool-for-linux-and-macos/ -o codesigntool.zip
          unzip codesigntool.zip
          
          # Make the tool executable
          chmod +x CodeSignTool.sh
          
          # Show where the tool is located for debugging
          pwd
          ls -la CodeSignTool.sh || echo "CodeSignTool.sh not found!"

      - name: Get EV certificate credential id
        if: ${{ inputs.sign }}
        id: get_credential_ids
        shell: bash
        run: |
          # Navigate to the directory with tauri.conf.json
          cd ${{ env.TAURI_CONFIG_DIR }} || true
          
          # Get the credential ID
          CREDENTIAL_ID=$(./CodeSignTool.sh get_credential_ids -username=${{ secrets.SSL_COM_USERNAME }} -password=${{ secrets.SSL_COM_PASSWORD }} | sed -n '1!p' | sed 's/- //')
          echo "Credential ID: $CREDENTIAL_ID"
          echo "SSL_COM_CREDENTIAL_ID=$CREDENTIAL_ID" >> "$GITHUB_OUTPUT"

      # Add custom sign command to tauri.conf.json for SSL.com signing
      - name: Add custom sign command to tauri.conf.json
        if: ${{ inputs.sign }}
        shell: bash
        run: |
          # Navigate to the directory with tauri.conf.json
          cd ${{ env.TAURI_CONFIG_DIR }} || true
          CONFIG_PATH="tauri.conf.json"
          
          # Get the absolute path to the CodeSignTool.sh
          TOOL_PATH=$(pwd)/CodeSignTool.sh
          
          # Convert the tool path to Windows format
          # Replace forward slashes with backslashes and add appropriate drive letter
          WIN_PATH=$(echo "$TOOL_PATH" | sed 's|/c/|C:\\|g' | sed 's|/|\\|g')
          
          echo "Windows Tool Path: $WIN_PATH"
          
          # Update the tauri.conf.json file with the correct path
          yq eval --inplace ".bundle.windows += {
            \"signCommand\": {
              \"cmd\": \"C:\\Program Files\\Git\\bin\\bash.EXE\",
              \"args\": [
                \"$WIN_PATH\",
                \"sign\",
                \"-username ${{ secrets.SSL_COM_USERNAME }}\",
                \"-password ${{ secrets.SSL_COM_PASSWORD }}\",
                \"-credential_id ${{ steps.get_credential_ids.outputs.SSL_COM_CREDENTIAL_ID }}\",
                \"-totp_secret ${{ secrets.SSL_COM_TOTP_SECRET }}\",
                \"-program_name NymWallet\",
                \"-input_file_path\",
                \"%1\",
                \"-override\"
              ]
            }
          }" "$CONFIG_PATH"
          
          # Show the updated configuration (redacted sensitive info)
          cat "$CONFIG_PATH" | grep -A 15 "signCommand" | sed 's/\-username.*/\-username REDACTED/g' | sed 's/\-password.*/\-password REDACTED/g' | sed 's/\-totp_secret.*/\-totp_secret REDACTED/g'

      - name: Install project dependencies
        shell: bash
        run: cd .. && yarn --network-timeout 100000

      - name: Install app dependencies
        shell: bash
        run: yarn --network-timeout 100000

      - name: Build and sign it
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Tauri v2 signing variables
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          SSL_COM_USERNAME: ${{ inputs.sign && secrets.SSL_COM_USERNAME }}
          SSL_COM_PASSWORD: ${{ inputs.sign && secrets.SSL_COM_PASSWORD }}
          SSL_COM_CREDENTIAL_ID: ${{ inputs.sign && steps.get_credential_ids.outputs.SSL_COM_CREDENTIAL_ID }}
          SSL_COM_TOTP_SECRET: ${{ inputs.sign && secrets.SSL_COM_TOTP_SECRET }}
        run: yarn build

      - name: Check bundle directory
        shell: bash
        run: |
          echo "Checking bundle directory structure"
          
          # Check standard location
          if [ -d "target/release/bundle" ]; then
            echo "Found bundle directory at standard location"
            ls -la target/release/bundle || echo "Failed to list bundle directory"
          fi
          
          # Check src-tauri location
          if [ -d "src-tauri/target/release/bundle" ]; then
            echo "Found bundle directory in src-tauri"
            ls -la src-tauri/target/release/bundle || echo "Failed to list src-tauri bundle directory"
            
            # Use this path for future steps
            echo "BUNDLE_PATH=src-tauri/target/release/bundle" >> $GITHUB_ENV
          else
            echo "Using standard bundle path"
            echo "BUNDLE_PATH=target/release/bundle" >> $GITHUB_ENV
          fi
          
          # Check for MSI files in any location
          find . -name "*.msi" -type f

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nym-wallet.msi
          path: |
            nym-wallet/${{ env.BUNDLE_PATH }}/msi/*.msi
            nym-wallet/${{ env.BUNDLE_PATH }}/*/nym-wallet*.msi
            nym-wallet/src-tauri/target/release/bundle/msi/*.msi
          retention-days: 30

      - id: create-release
        name: Upload to release based on tag name
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release'
        with:
          files: |
            nym-wallet/${{ env.BUNDLE_PATH }}/msi/*.msi
            nym-wallet/${{ env.BUNDLE_PATH }}/msi/*.msi.zip*
            nym-wallet/${{ env.BUNDLE_PATH }}/*/nym-wallet*.msi
            nym-wallet/src-tauri/target/release/bundle/msi/*.msi

      - name: Find MSI path for deployment
        id: find-msi
        shell: bash
        run: |
          MSI_FILE=$(find . -name "*.msi" -type f | head -n 1)
          if [ -n "$MSI_FILE" ]; then
            echo "Found MSI file: $MSI_FILE"
            echo "msi_path=$MSI_FILE" >> $GITHUB_OUTPUT
          else
            echo "WARNING: No MSI file found for deployment!"
            echo "msi_path=${{ env.BUNDLE_PATH }}/msi/nym-wallet*.msi" >> $GITHUB_OUTPUT
          fi

      - name: Deploy artifacts to CI www
        continue-on-error: true
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.CI_WWW_SSH_PRIVATE_KEY }}
          ARGS: "-avzr"
          SOURCE: ${{ steps.find-msi.outputs.msi_path }}
          REMOTE_HOST: ${{ secrets.CI_WWW_REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.CI_WWW_REMOTE_USER }}
          TARGET: ${{ secrets.CI_WWW_REMOTE_TARGET }}/builds/${{ github.ref_name }}/nym-wallet
          EXCLUDE: "/dist/, /node_modules/"            

  push-release-data:
    if: ${{ (startsWith(github.ref, 'refs/tags/nym-wallet-') && github.event_name == 'release') || github.event_name == 'workflow_dispatch' }}
    uses: ./.github/workflows/release-calculate-hash.yml
    needs: publish-tauri
    with:
      release_tag: ${{ github.ref_name }}
    secrets: inherit