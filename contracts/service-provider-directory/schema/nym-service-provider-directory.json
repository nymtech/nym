{
  "contract_name": "nym-service-provider-directory",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "deposit_required"
    ],
    "properties": {
      "deposit_required": {
        "$ref": "#/definitions/Coin"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "announce"
        ],
        "properties": {
          "announce": {
            "type": "object",
            "required": [
              "owner_signature",
              "service"
            ],
            "properties": {
              "owner_signature": {
                "$ref": "#/definitions/MessageSignature"
              },
              "service": {
                "$ref": "#/definitions/ServiceDetails"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "delete_id"
        ],
        "properties": {
          "delete_id": {
            "type": "object",
            "required": [
              "service_id"
            ],
            "properties": {
              "service_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "delete_nym_address"
        ],
        "properties": {
          "delete_nym_address": {
            "type": "object",
            "required": [
              "nym_address"
            ],
            "properties": {
              "nym_address": {
                "$ref": "#/definitions/NymAddress"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_deposit_required"
        ],
        "properties": {
          "update_deposit_required": {
            "type": "object",
            "required": [
              "deposit_required"
            ],
            "properties": {
              "deposit_required": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "MessageSignature": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "NymAddress": {
        "description": "The types of addresses supported.",
        "oneOf": [
          {
            "description": "String representation of a nym address, which is of the form client_id.client_enc@gateway_id.",
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ServiceDetails": {
        "type": "object",
        "required": [
          "identity_key",
          "nym_address",
          "service_type"
        ],
        "properties": {
          "identity_key": {
            "description": "The identity key of the service.",
            "type": "string"
          },
          "nym_address": {
            "description": "The address of the service.",
            "allOf": [
              {
                "$ref": "#/definitions/NymAddress"
              }
            ]
          },
          "service_type": {
            "description": "The service type.",
            "allOf": [
              {
                "$ref": "#/definitions/ServiceType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ServiceType": {
        "description": "The type of services provider supported",
        "type": "string",
        "enum": [
          "network_requester"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "service_id"
        ],
        "properties": {
          "service_id": {
            "type": "object",
            "required": [
              "service_id"
            ],
            "properties": {
              "service_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "by_announcer"
        ],
        "properties": {
          "by_announcer": {
            "type": "object",
            "required": [
              "announcer"
            ],
            "properties": {
              "announcer": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "by_nym_address"
        ],
        "properties": {
          "by_nym_address": {
            "type": "object",
            "required": [
              "nym_address"
            ],
            "properties": {
              "nym_address": {
                "$ref": "#/definitions/NymAddress"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all"
        ],
        "properties": {
          "all": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "signing_nonce"
        ],
        "properties": {
          "signing_nonce": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets build information of this contract, such as the commit hash used for the build or rustc version.",
        "type": "object",
        "required": [
          "get_contract_version"
        ],
        "properties": {
          "get_contract_version": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the stored contract version information that's required by the CW2 spec interface for migrations.",
        "type": "object",
        "required": [
          "get_cw2_contract_version"
        ],
        "properties": {
          "get_cw2_contract_version": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "NymAddress": {
        "description": "The types of addresses supported.",
        "oneOf": [
          {
            "description": "String representation of a nym address, which is of the form client_id.client_enc@gateway_id.",
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "all": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PagedServicesListResponse",
      "type": "object",
      "required": [
        "per_page",
        "services"
      ],
      "properties": {
        "per_page": {
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        },
        "start_next_after": {
          "description": "Field indicating paging information for the following queries if the caller wishes to get further entries.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "NymAddress": {
          "description": "The types of addresses supported.",
          "oneOf": [
            {
              "description": "String representation of a nym address, which is of the form client_id.client_enc@gateway_id.",
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Service": {
          "type": "object",
          "required": [
            "announcer",
            "block_height",
            "deposit",
            "service",
            "service_id"
          ],
          "properties": {
            "announcer": {
              "description": "Address of the service owner.",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "block_height": {
              "description": "Block height at which the service was added.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "deposit": {
              "description": "The deposit used to announce the service.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "service": {
              "description": "The announced service.",
              "allOf": [
                {
                  "$ref": "#/definitions/ServiceDetails"
                }
              ]
            },
            "service_id": {
              "description": "Unique id assigned to the anounced service.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "ServiceDetails": {
          "type": "object",
          "required": [
            "identity_key",
            "nym_address",
            "service_type"
          ],
          "properties": {
            "identity_key": {
              "description": "The identity key of the service.",
              "type": "string"
            },
            "nym_address": {
              "description": "The address of the service.",
              "allOf": [
                {
                  "$ref": "#/definitions/NymAddress"
                }
              ]
            },
            "service_type": {
              "description": "The service type.",
              "allOf": [
                {
                  "$ref": "#/definitions/ServiceType"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ServiceType": {
          "description": "The type of services provider supported",
          "type": "string",
          "enum": [
            "network_requester"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "by_announcer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ServicesListResponse",
      "type": "object",
      "required": [
        "services"
      ],
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "NymAddress": {
          "description": "The types of addresses supported.",
          "oneOf": [
            {
              "description": "String representation of a nym address, which is of the form client_id.client_enc@gateway_id.",
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Service": {
          "type": "object",
          "required": [
            "announcer",
            "block_height",
            "deposit",
            "service",
            "service_id"
          ],
          "properties": {
            "announcer": {
              "description": "Address of the service owner.",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "block_height": {
              "description": "Block height at which the service was added.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "deposit": {
              "description": "The deposit used to announce the service.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "service": {
              "description": "The announced service.",
              "allOf": [
                {
                  "$ref": "#/definitions/ServiceDetails"
                }
              ]
            },
            "service_id": {
              "description": "Unique id assigned to the anounced service.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "ServiceDetails": {
          "type": "object",
          "required": [
            "identity_key",
            "nym_address",
            "service_type"
          ],
          "properties": {
            "identity_key": {
              "description": "The identity key of the service.",
              "type": "string"
            },
            "nym_address": {
              "description": "The address of the service.",
              "allOf": [
                {
                  "$ref": "#/definitions/NymAddress"
                }
              ]
            },
            "service_type": {
              "description": "The service type.",
              "allOf": [
                {
                  "$ref": "#/definitions/ServiceType"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ServiceType": {
          "description": "The type of services provider supported",
          "type": "string",
          "enum": [
            "network_requester"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "by_nym_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ServicesListResponse",
      "type": "object",
      "required": [
        "services"
      ],
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "NymAddress": {
          "description": "The types of addresses supported.",
          "oneOf": [
            {
              "description": "String representation of a nym address, which is of the form client_id.client_enc@gateway_id.",
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Service": {
          "type": "object",
          "required": [
            "announcer",
            "block_height",
            "deposit",
            "service",
            "service_id"
          ],
          "properties": {
            "announcer": {
              "description": "Address of the service owner.",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "block_height": {
              "description": "Block height at which the service was added.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "deposit": {
              "description": "The deposit used to announce the service.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "service": {
              "description": "The announced service.",
              "allOf": [
                {
                  "$ref": "#/definitions/ServiceDetails"
                }
              ]
            },
            "service_id": {
              "description": "Unique id assigned to the anounced service.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "ServiceDetails": {
          "type": "object",
          "required": [
            "identity_key",
            "nym_address",
            "service_type"
          ],
          "properties": {
            "identity_key": {
              "description": "The identity key of the service.",
              "type": "string"
            },
            "nym_address": {
              "description": "The address of the service.",
              "allOf": [
                {
                  "$ref": "#/definitions/NymAddress"
                }
              ]
            },
            "service_type": {
              "description": "The service type.",
              "allOf": [
                {
                  "$ref": "#/definitions/ServiceType"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ServiceType": {
          "description": "The type of services provider supported",
          "type": "string",
          "enum": [
            "network_requester"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "deposit_required"
      ],
      "properties": {
        "deposit_required": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_c_w2_contract_version": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractVersion",
      "type": "object",
      "required": [
        "contract",
        "version"
      ],
      "properties": {
        "contract": {
          "description": "contract is the crate name of the implementing contract, eg. `crate:cw20-base` we will use other prefixes for other languages, and their standard global namespacing",
          "type": "string"
        },
        "version": {
          "description": "version is any string that this implementation knows. It may be simple counter \"1\", \"2\". or semantic version on release tags \"v0.7.0\", or some custom feature flag list. the only code that needs to understand the version parsing is code that knows how to migrate from the given contract (and is tied to it's implementation somehow)",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "get_contract_version": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractBuildInformation",
      "type": "object",
      "required": [
        "build_timestamp",
        "build_version",
        "commit_branch",
        "commit_sha",
        "commit_timestamp",
        "rustc_version"
      ],
      "properties": {
        "build_timestamp": {
          "description": "Provides the build timestamp, for example `2021-02-23T20:14:46.558472672+00:00`.",
          "type": "string"
        },
        "build_version": {
          "description": "Provides the build version, for example `0.1.0-9-g46f83e1`.",
          "type": "string"
        },
        "commit_branch": {
          "description": "Provides the name of the git branch that was used for the build, for example `master`.",
          "type": "string"
        },
        "commit_sha": {
          "description": "Provides the hash of the commit that was used for the build, for example `46f83e112520533338245862d366f6a02cef07d4`.",
          "type": "string"
        },
        "commit_timestamp": {
          "description": "Provides the timestamp of the commit that was used for the build, for example `2021-02-23T08:08:02-05:00`.",
          "type": "string"
        },
        "rustc_version": {
          "description": "Provides the rustc version that was used for the build, for example `1.52.0-nightly`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "service_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Service",
      "type": "object",
      "required": [
        "announcer",
        "block_height",
        "deposit",
        "service",
        "service_id"
      ],
      "properties": {
        "announcer": {
          "description": "Address of the service owner.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "block_height": {
          "description": "Block height at which the service was added.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "deposit": {
          "description": "The deposit used to announce the service.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "service": {
          "description": "The announced service.",
          "allOf": [
            {
              "$ref": "#/definitions/ServiceDetails"
            }
          ]
        },
        "service_id": {
          "description": "Unique id assigned to the anounced service.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "NymAddress": {
          "description": "The types of addresses supported.",
          "oneOf": [
            {
              "description": "String representation of a nym address, which is of the form client_id.client_enc@gateway_id.",
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ServiceDetails": {
          "type": "object",
          "required": [
            "identity_key",
            "nym_address",
            "service_type"
          ],
          "properties": {
            "identity_key": {
              "description": "The identity key of the service.",
              "type": "string"
            },
            "nym_address": {
              "description": "The address of the service.",
              "allOf": [
                {
                  "$ref": "#/definitions/NymAddress"
                }
              ]
            },
            "service_type": {
              "description": "The service type.",
              "allOf": [
                {
                  "$ref": "#/definitions/ServiceType"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ServiceType": {
          "description": "The type of services provider supported",
          "type": "string",
          "enum": [
            "network_requester"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "signing_nonce": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint32",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  }
}
