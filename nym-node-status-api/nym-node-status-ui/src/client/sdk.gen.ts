// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "./client";
import { client as _heyApiClient } from "./client.gen";
import type {
  BuildInformationData,
  BuildInformationResponses,
  GatewaysData,
  GatewaysResponses,
  GatewaysSkinnyData,
  GatewaysSkinnyResponses,
  GetAllSessionsData,
  GetAllSessionsResponses,
  GetEntryGatewayCountriesData,
  GetEntryGatewayCountriesResponses,
  GetEntryGatewaysByCountryData,
  GetEntryGatewaysByCountryResponses,
  GetEntryGatewaysData,
  GetEntryGatewaysResponses,
  GetExitGatewayCountriesData,
  GetExitGatewayCountriesResponses,
  GetExitGatewaysByCountryData,
  GetExitGatewaysByCountryResponses,
  GetExitGatewaysData,
  GetExitGatewaysResponses,
  GetGatewayCountriesData,
  GetGatewayCountriesResponses,
  GetGatewayData,
  GetGatewayResponses,
  GetGatewaysByCountryData,
  GetGatewaysByCountryResponses,
  GetGatewaysData,
  GetGatewaysResponses,
  GetMixnodesData,
  GetMixnodesResponses,
  GetStatsData,
  GetStatsResponses,
  HealthData,
  HealthResponses,
  Mixnodes2Data,
  Mixnodes2Responses,
  MixnodesData,
  MixnodesResponses,
  NodeDelegationsData,
  NodeDelegationsResponses,
  NymNodesData,
  NymNodesResponses,
  SummaryData,
  SummaryHistoryData,
  SummaryHistoryResponses,
  SummaryResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Gets available entry and exit gateways from the Nym network directory
 */
export const getGateways = <ThrowOnError extends boolean = false>(
  options?: Options<GetGatewaysData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGatewaysResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways",
    ...options,
  });
};

/**
 * Gets available exit gateway countries as two-letter ISO country codes from the Nym network directory
 */
export const getGatewayCountries = <ThrowOnError extends boolean = false>(
  options?: Options<GetGatewayCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGatewayCountriesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/countries",
    ...options,
  });
};

/**
 * Gets available gateways from the Nym network directory by country
 */
export const getGatewaysByCountry = <ThrowOnError extends boolean = false>(
  options: Options<GetGatewaysByCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetGatewaysByCountryResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/country/{two_letter_country_code}",
    ...options,
  });
};

/**
 * Gets available entry gateways from the Nym network directory
 */
export const getEntryGateways = <ThrowOnError extends boolean = false>(
  options?: Options<GetEntryGatewaysData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetEntryGatewaysResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/entry",
    ...options,
  });
};

/**
 * Gets available entry gateway countries as two-letter ISO country codes from the Nym network directory
 */
export const getEntryGatewayCountries = <ThrowOnError extends boolean = false>(
  options?: Options<GetEntryGatewayCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetEntryGatewayCountriesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/entry/countries",
    ...options,
  });
};

/**
 * Gets available entry gateways from the Nym network directory by country
 */
export const getEntryGatewaysByCountry = <ThrowOnError extends boolean = false>(
  options: Options<GetEntryGatewaysByCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetEntryGatewaysByCountryResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/entry/country/{two_letter_country_code}",
    ...options,
  });
};

/**
 * Gets available exit gateways from the Nym network directory
 */
export const getExitGateways = <ThrowOnError extends boolean = false>(
  options?: Options<GetExitGatewaysData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetExitGatewaysResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/exit",
    ...options,
  });
};

/**
 * Gets available exit gateway countries as two-letter ISO country codes from the Nym network directory
 */
export const getExitGatewayCountries = <ThrowOnError extends boolean = false>(
  options?: Options<GetExitGatewayCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetExitGatewayCountriesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/exit/countries",
    ...options,
  });
};

/**
 * Gets available exit gateways from the Nym network directory by country
 */
export const getExitGatewaysByCountry = <ThrowOnError extends boolean = false>(
  options: Options<GetExitGatewaysByCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetExitGatewaysByCountryResponses,
    unknown,
    ThrowOnError
  >({
    url: "/dvpn/v1/directory/gateways/exit/country/{two_letter_country_code}",
    ...options,
  });
};

export const nymNodes = <ThrowOnError extends boolean = false>(
  options?: Options<NymNodesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    NymNodesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/explorer/v3/nym-nodes",
    ...options,
  });
};

export const nodeDelegations = <ThrowOnError extends boolean = false>(
  options: Options<NodeDelegationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    NodeDelegationsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/explorer/v3/nym-nodes/{node_id}/delegations",
    ...options,
  });
};

export const gateways = <ThrowOnError extends boolean = false>(
  options?: Options<GatewaysData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GatewaysResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/gateways",
    ...options,
  });
};

export const gatewaysSkinny = <ThrowOnError extends boolean = false>(
  options?: Options<GatewaysSkinnyData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GatewaysSkinnyResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/gateways/skinny",
    ...options,
  });
};

export const getGateway = <ThrowOnError extends boolean = false>(
  options: Options<GetGatewayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetGatewayResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/gateways/{identity_key}",
    ...options,
  });
};

export const getAllSessions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllSessionsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/metrics/sessions",
    ...options,
  });
};

export const mixnodes = <ThrowOnError extends boolean = false>(
  options?: Options<MixnodesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    MixnodesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/mixnodes",
    ...options,
  });
};

export const getStats = <ThrowOnError extends boolean = false>(
  options?: Options<GetStatsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStatsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/mixnodes/stats",
    ...options,
  });
};

export const getMixnodes = <ThrowOnError extends boolean = false>(
  options: Options<GetMixnodesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMixnodesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/mixnodes/{mix_id}",
    ...options,
  });
};

export const mixnodes2 = <ThrowOnError extends boolean = false>(
  options?: Options<Mixnodes2Data, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    Mixnodes2Responses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/services",
    ...options,
  });
};

export const buildInformation = <ThrowOnError extends boolean = false>(
  options?: Options<BuildInformationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    BuildInformationResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/status/build_information",
    ...options,
  });
};

export const health = <ThrowOnError extends boolean = false>(
  options?: Options<HealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/status/health",
    ...options,
  });
};

export const summary = <ThrowOnError extends boolean = false>(
  options?: Options<SummaryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SummaryResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/summary",
    ...options,
  });
};

export const summaryHistory = <ThrowOnError extends boolean = false>(
  options?: Options<SummaryHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SummaryHistoryResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v2/summary/history",
    ...options,
  });
};
