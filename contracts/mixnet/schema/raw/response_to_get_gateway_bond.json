{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GatewayBondResponse",
  "description": "Response containing details of a gateway with the provided identity key.",
  "type": "object",
  "required": [
    "identity"
  ],
  "properties": {
    "gateway": {
      "description": "If there exists a gateway with the provided identity key, this field contains its details.",
      "anyOf": [
        {
          "$ref": "#/definitions/GatewayBond"
        },
        {
          "type": "null"
        }
      ]
    },
    "identity": {
      "description": "The identity key (base58-encoded ed25519 public key) of the gateway.",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Gateway": {
      "description": "Information provided by the node operator during bonding that are used to allow other entities to use the services of this node.",
      "type": "object",
      "required": [
        "clients_port",
        "host",
        "identity_key",
        "location",
        "mix_port",
        "sphinx_key",
        "version"
      ],
      "properties": {
        "clients_port": {
          "description": "Port used by this gateway for listening for client requests.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "host": {
          "description": "Network address of this gateway, for example 1.1.1.1 or foo.gateway.com",
          "type": "string"
        },
        "identity_key": {
          "description": "Base58 encoded ed25519 EdDSA public key of the gateway used to derive shared keys with clients",
          "type": "string"
        },
        "location": {
          "description": "The physical, self-reported, location of this gateway.",
          "type": "string"
        },
        "mix_port": {
          "description": "Port used by this gateway for listening for mix packets.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "sphinx_key": {
          "description": "Base58-encoded x25519 public key used for sphinx key derivation.",
          "type": "string"
        },
        "version": {
          "description": "The self-reported semver version of this gateway.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "GatewayBond": {
      "description": "Basic gateway information provided by the node operator.",
      "type": "object",
      "required": [
        "block_height",
        "gateway",
        "owner",
        "pledge_amount"
      ],
      "properties": {
        "block_height": {
          "description": "Block height at which this gateway has been bonded.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "gateway": {
          "description": "Information provided by the operator for the purposes of bonding.",
          "allOf": [
            {
              "$ref": "#/definitions/Gateway"
            }
          ]
        },
        "owner": {
          "description": "Address of the owner of this gateway.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "pledge_amount": {
          "description": "Original amount pledged by the operator of this node.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "proxy": {
          "description": "Entity who bonded this gateway on behalf of the owner. If exists, it's most likely the address of the vesting contract.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
