/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/about-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/about-page"];
    put: operations["put/about-page"];
    post?: never;
    delete: operations["delete/about-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/about-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/about-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/basic-pages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/basic-pages"];
    put?: never;
    post: operations["post/basic-pages"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/basic-pages/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/basic-pages/{id}"];
    put: operations["put/basic-pages/{id}"];
    post?: never;
    delete: operations["delete/basic-pages/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/basic-pages/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/basic-pages/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-authors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/blog-authors"];
    put?: never;
    post: operations["post/blog-authors"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-authors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/blog-authors/{id}"];
    put: operations["put/blog-authors/{id}"];
    post?: never;
    delete: operations["delete/blog-authors/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-authors/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/blog-authors/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/blog-categories"];
    put?: never;
    post: operations["post/blog-categories"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/blog-categories/{id}"];
    put: operations["put/blog-categories/{id}"];
    post?: never;
    delete: operations["delete/blog-categories/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-categories/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/blog-categories/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/blog-page"];
    put: operations["put/blog-page"];
    post?: never;
    delete: operations["delete/blog-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/blog-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/blog-posts"];
    put?: never;
    post: operations["post/blog-posts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/blog-posts/{id}"];
    put: operations["put/blog-posts/{id}"];
    post?: never;
    delete: operations["delete/blog-posts/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-posts/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/blog-posts/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/downloads": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/downloads"];
    put?: never;
    post: operations["post/downloads"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/downloads/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/downloads/{id}"];
    put: operations["put/downloads/{id}"];
    post?: never;
    delete: operations["delete/downloads/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/downloads/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/downloads/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/downloads-menu": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/downloads-menu"];
    put: operations["put/downloads-menu"];
    post?: never;
    delete: operations["delete/downloads-menu"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/downloads-menu/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/downloads-menu/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/features": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/features"];
    put?: never;
    post: operations["post/features"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/features/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/features/{id}"];
    put: operations["put/features/{id}"];
    post?: never;
    delete: operations["delete/features/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/features/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/features/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/feature-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/feature-categories"];
    put?: never;
    post: operations["post/feature-categories"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/feature-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/feature-categories/{id}"];
    put: operations["put/feature-categories/{id}"];
    post?: never;
    delete: operations["delete/feature-categories/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/feature-categories/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/feature-categories/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/features-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/features-page"];
    put: operations["put/features-page"];
    post?: never;
    delete: operations["delete/features-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/features-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/features-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/footer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/footer"];
    put: operations["put/footer"];
    post?: never;
    delete: operations["delete/footer"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/footer/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/footer/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/glossary-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/glossary-page"];
    put: operations["put/glossary-page"];
    post?: never;
    delete: operations["delete/glossary-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/glossary-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/glossary-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/glossary-terms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/glossary-terms"];
    put?: never;
    post: operations["post/glossary-terms"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/glossary-terms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/glossary-terms/{id}"];
    put: operations["put/glossary-terms/{id}"];
    post?: never;
    delete: operations["delete/glossary-terms/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/glossary-terms/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/glossary-terms/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/home-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/home-page"];
    put: operations["put/home-page"];
    post?: never;
    delete: operations["delete/home-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/home-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/home-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/litepaper": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/litepaper"];
    put: operations["put/litepaper"];
    post?: never;
    delete: operations["delete/litepaper"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/litepaper/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/litepaper/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/navigation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/navigation"];
    put: operations["put/navigation"];
    post?: never;
    delete: operations["delete/navigation"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/navigation/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/navigation/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/network-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/network-page"];
    put: operations["put/network-page"];
    post?: never;
    delete: operations["delete/network-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/network-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/network-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/page-not-found": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/page-not-found"];
    put: operations["put/page-not-found"];
    post?: never;
    delete: operations["delete/page-not-found"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/page-not-found/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/page-not-found/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/press-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/press-page"];
    put: operations["put/press-page"];
    post?: never;
    delete: operations["delete/press-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/press-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/press-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/press-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/press-posts"];
    put?: never;
    post: operations["post/press-posts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/press-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/press-posts/{id}"];
    put: operations["put/press-posts/{id}"];
    post?: never;
    delete: operations["delete/press-posts/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/press-posts/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/press-posts/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team-members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/team-members"];
    put?: never;
    post: operations["post/team-members"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team-members/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/team-members/{id}"];
    put: operations["put/team-members/{id}"];
    post?: never;
    delete: operations["delete/team-members/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team-members/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/team-members/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-advisors-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/trust-center-advisors-page"];
    put: operations["put/trust-center-advisors-page"];
    post?: never;
    delete: operations["delete/trust-center-advisors-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-advisors-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/trust-center-advisors-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/trust-center-categories"];
    put?: never;
    post: operations["post/trust-center-categories"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/trust-center-categories/{id}"];
    put: operations["put/trust-center-categories/{id}"];
    post?: never;
    delete: operations["delete/trust-center-categories/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-categories/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/trust-center-categories/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/trust-center-page"];
    put: operations["put/trust-center-page"];
    post?: never;
    delete: operations["delete/trust-center-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/trust-center-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/trust-center-posts"];
    put?: never;
    post: operations["post/trust-center-posts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/trust-center-posts/{id}"];
    put: operations["put/trust-center-posts/{id}"];
    post?: never;
    delete: operations["delete/trust-center-posts/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/trust-center-posts/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/trust-center-posts/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/use-cases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/use-cases"];
    put?: never;
    post: operations["post/use-cases"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/use-cases/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/use-cases/{id}"];
    put: operations["put/use-cases/{id}"];
    post?: never;
    delete: operations["delete/use-cases/{id}"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/use-cases/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/use-cases/{id}/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/use-cases-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get/use-cases-page"];
    put: operations["put/use-cases-page"];
    post?: never;
    delete: operations["delete/use-cases-page"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/use-cases-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["post/use-cases-page/localizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Upload files */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
            path?: string;
            /** @description The ID of the entry which the file(s) will be linked to */
            refId?: string;
            /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
            ref?: string;
            /** @description The field of the entry which the file(s) will be precisely linked to. */
            field?: string;
            files: string[];
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/upload?id={id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Upload file information */
    post: {
      parameters: {
        query: {
          /** @description File id */
          id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            fileInfo?: {
              name?: string;
              alternativeText?: string;
              caption?: string;
            };
            /** Format: binary */
            files?: string;
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/upload/files": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Get a list of files */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/upload/files/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Get a specific file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Delete a file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/connect/{provider}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Login with a provider
     * @description Redirects to provider login before being redirect to /auth/{provider}/callback
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Provider name */
          provider: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Redirect response */
        301: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/local": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Local login
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /** @example {
           *       "identifier": "foobar",
           *       "password": "Test1234"
           *     } */
          "application/json": {
            identifier?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Connection */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/local/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a user
     * @description Returns a jwt token and user info
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /** @example {
           *       "username": "foobar",
           *       "email": "foo.bar@strapi.io",
           *       "password": "Test1234"
           *     } */
          "application/json": {
            username?: string;
            email?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Successful registration */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/{provider}/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Default Callback from provider auth */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Provider name */
          provider: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/forgot-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send rest password email */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /** @example {
           *       "email": "foo.bar@strapi.io"
           *     } */
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns ok */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/reset-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Rest user password */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /** @example {
           *       "password": "Test1234",
           *       "passwordConfirmation": "Test1234",
           *       "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
           *     } */
          "application/json": {
            password?: string;
            passwordConfirmation?: string;
            code?: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/change-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update user's own password */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            password: string;
            currentPassword: string;
            passwordConfirmation: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/email-confirmation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Confirm user email */
    get: {
      parameters: {
        query?: {
          /** @description confirmation token received by email */
          confirmation?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Redirects to the configure email confirmation redirect url */
        301: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/send-email-confirmation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send confirmation email */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              email?: string;
              /** @enum {string} */
              sent?: true;
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users-permissions/permissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get default generated permissions */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns the permissions tree */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users-permissions/roles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List roles */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns list of roles */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              roles?: (components["schemas"]["Users-Permissions-Role"] & {
                nb_users?: number;
              })[];
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Create a role */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was create */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users-permissions/roles/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a role */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description role Id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns the role */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users-permissions/roles/{role}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update a role */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description role Id */
          role: string;
        };
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was udpated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete a role */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description role Id */
          role: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns ok if the role was delete */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get list of users */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns an array of users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"][];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Create a user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          "application/json": {
            email: string;
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Returns created user info */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a user */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user Id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns a user */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a user */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user Id */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          /** @example {
           *       "username": "foo",
           *       "email": "foo@strapi.io",
           *       "password": "foo-password"
           *     } */
          "application/json": {
            email: string;
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Returns updated user info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete a user */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user Id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns deleted user info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get authenticated user info */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns user info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user count */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns a number */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": number;
          };
        };
        /** @description Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Error: {
      data?: (Record<string, never> | Record<string, never>[]) | null;
      error: {
        status?: number;
        name?: string;
        message?: string;
        details?: Record<string, never>;
      };
    };
    AboutPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
      )[];
      locale: string;
    };
    AboutPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        dynamicZone?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        )[];
        locale?: string;
      };
    };
    AboutPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["AboutPage"];
    };
    AboutPageLocalizationResponse: {
      data?: components["schemas"]["AboutPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    AboutPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["AboutPage"];
    };
    AboutPageLocalizationListResponse: {
      data?: components["schemas"]["AboutPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    AboutPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["AboutPage"];
    };
    AboutPageListResponse: {
      data?: components["schemas"]["AboutPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    AboutPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
      )[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["AboutPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    AboutPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["AboutPage"];
    };
    AboutPageResponse: {
      data?: components["schemas"]["AboutPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    SharedSeoComponent: {
      id?: number;
      metaTitle?: string;
      metaDescription?: string;
      metaImage?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  files?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              firstname?: string;
                              lastname?: string;
                              username?: string;
                              /** Format: email */
                              email?: string;
                              resetPasswordToken?: string;
                              registrationToken?: string;
                              isActive?: boolean;
                              roles?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    code?: string;
                                    description?: string;
                                    users?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                    };
                                    permissions?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          action?: string;
                                          actionParameters?: unknown;
                                          subject?: string;
                                          properties?: unknown;
                                          conditions?: unknown;
                                          role?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                        };
                                      }[];
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                              };
                              blocked?: boolean;
                              preferedLanguage?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      keywords?: string;
      metaRobots?: string;
      structuredData?: unknown;
      canonicalURL?: string;
    };
    UiLinkComponent: {
      id?: number;
      title?: string;
      url?: string;
    };
    DynamicZoneValuePropositionWithTextComponent: {
      id?: number;
      __component?: string;
      title?: string;
      text?: string;
      links?: components["schemas"]["UiLinkComponent"][];
      media?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** @enum {string} */
      direction?: "text-right" | "text-left";
    };
    UiBulletWithImageComponent: {
      id?: number;
      title?: string;
      text?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
    };
    DynamicZoneValuePropositionWithBulletsComponent: {
      id?: number;
      __component?: string;
      title?: string;
      links?: components["schemas"]["UiLinkComponent"][];
      media?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** @enum {string} */
      direction?: "text-right" | "text-left";
      bullets?: components["schemas"]["UiBulletWithImageComponent"][];
    };
    UiHeadingComponent: {
      id?: number;
      title?: string;
      /** @enum {string} */
      level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    };
    TilesTileComponent: {
      id?: number;
      title?: string;
      subtitle?: string;
      description?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      url?: string;
    };
    DynamicZoneTilesComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      tiles?: components["schemas"]["TilesTileComponent"][];
    };
    DynamicZoneTeamMembersComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      subtitle?: string;
      teamMembers?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            role?: string;
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            bio?: string;
            socialNetworks?: {
              id?: number;
              links?: {
                id?: number;
                url?: string;
                /** @enum {string} */
                network?: "linkedin" | "twitter" | "wikipedia" | "website";
              }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
    };
    QuotesQuoteComponent: {
      id?: number;
      title?: string;
      quote?: string;
    };
    DynamicZoneQuotesComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      quotes?: components["schemas"]["QuotesQuoteComponent"][];
    };
    UiHeadingExtendedComponent: {
      id?: number;
      title?: string;
      /** @enum {string} */
      level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
      /** @enum {string} */
      style?: "h1" | "h2" | "h3" | "h4";
      /** @enum {string} */
      alignment?: "left" | "center";
    };
    DynamicZoneParagraphWithTitleComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingExtendedComponent"];
      text?: string;
      primaryLinks?: components["schemas"]["UiLinkComponent"][];
      secondaryLinks?: components["schemas"]["UiLinkComponent"][];
      background?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
    };
    DynamicZoneLogoCarouselComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      isStatic?: boolean;
      images?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        }[];
      };
    };
    TilesContentTileComponent: {
      id?: number;
      title?: string;
      subtitle?: string;
      text?: string;
      label1?: string;
      label2?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      button?: {
        id?: number;
        title?: string;
        url?: string;
      };
      dataTable?: string;
    };
    DynamicZoneContentTilesComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      tiles?: components["schemas"]["TilesContentTileComponent"][];
    };
    DynamicZoneBlogPostsComponent: {
      id?: number;
      __component?: string;
      blogPosts?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            subtitle?: string;
            content?: string;
            excerpt?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            blogCategories?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  slug?: string;
                  SEO?: {
                    id?: number;
                    metaTitle?: string;
                    metaDescription?: string;
                    metaImage?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    keywords?: string;
                    metaRobots?: string;
                    structuredData?: unknown;
                    canonicalURL?: string;
                  };
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  description?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            blogAuthors?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  bio?: string;
                  avatar?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  slug?: string;
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  role?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            relatedPosts?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date */
            date?: string;
            readingTime?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      heading?: components["schemas"]["UiHeadingComponent"];
    };
    BlocksBlockComponent: {
      id?: number;
      title?: string;
      description?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
    };
    DynamicZoneBlocksComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      subtitle?: string;
      blocks?: components["schemas"]["BlocksBlockComponent"][];
      /** @enum {string} */
      type?: "high-density" | "low-density";
    };
    FaqsQuestionComponent: {
      id?: number;
      question?: string;
      answer?: string;
    };
    FaqsFaQsComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      questions?: components["schemas"]["FaqsQuestionComponent"][];
    };
    CarouselCarouselSlideQuoteComponent: {
      id?: number;
      quote?: string;
      source?: string;
    };
    DynamicZoneCarouselQuoteComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      slides?: components["schemas"]["CarouselCarouselSlideQuoteComponent"][];
    };
    CarouselCarouselSlideTextImageComponent: {
      id?: number;
      text?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
    };
    DynamicZoneCarouselTextImageComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      slides?: components["schemas"]["CarouselCarouselSlideTextImageComponent"][];
    };
    BasicPageLocalizationRequest: {
      title: string;
      slug: string;
      dynamicZone?: (
        | components["schemas"]["DynamicZoneRichTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      SEO?: components["schemas"]["SharedSeoComponent"];
      locale: string;
    };
    BasicPageRequest: {
      data: {
        title: string;
        slug: string;
        dynamicZone?: (
          | components["schemas"]["DynamicZoneRichTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        SEO?: components["schemas"]["SharedSeoComponent"];
        locale?: string;
      };
    };
    BasicPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["BasicPage"];
    };
    BasicPageLocalizationResponse: {
      data?: components["schemas"]["BasicPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    BasicPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["BasicPage"];
    };
    BasicPageLocalizationListResponse: {
      data?: components["schemas"]["BasicPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BasicPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["BasicPage"];
    };
    BasicPageListResponse: {
      data?: components["schemas"]["BasicPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BasicPage: {
      title: string;
      slug: string;
      dynamicZone?: (
        | components["schemas"]["DynamicZoneRichTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      SEO?: components["schemas"]["SharedSeoComponent"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["BasicPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    BasicPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["BasicPage"];
    };
    BasicPageResponse: {
      data?: components["schemas"]["BasicPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    DynamicZoneRichTextComponent: {
      id?: number;
      __component?: string;
      content?: string;
      tableOfContents?: boolean;
      heading?: components["schemas"]["UiHeadingComponent"];
    };
    BlogAuthorLocalizationRequest: {
      name: string;
      bio?: string;
      /** @example string or id */
      avatar?: number | string;
      slug: string;
      blogPosts?: (number | string)[];
      role?: string;
      locale: string;
    };
    BlogAuthorRequest: {
      data: {
        name: string;
        bio?: string;
        /** @example string or id */
        avatar?: number | string;
        slug: string;
        blogPosts?: (number | string)[];
        role?: string;
        locale?: string;
      };
    };
    BlogAuthorResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogAuthor"];
    };
    BlogAuthorLocalizationResponse: {
      data?: components["schemas"]["BlogAuthorResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    BlogAuthorListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogAuthor"];
    };
    BlogAuthorLocalizationListResponse: {
      data?: components["schemas"]["BlogAuthorListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogAuthorListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["BlogAuthor"];
    };
    BlogAuthorListResponse: {
      data?: components["schemas"]["BlogAuthorListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogAuthor: {
      name: string;
      bio?: string;
      avatar?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  files?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              firstname?: string;
                              lastname?: string;
                              username?: string;
                              /** Format: email */
                              email?: string;
                              resetPasswordToken?: string;
                              registrationToken?: string;
                              isActive?: boolean;
                              roles?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    code?: string;
                                    description?: string;
                                    users?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                    };
                                    permissions?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          action?: string;
                                          actionParameters?: unknown;
                                          subject?: string;
                                          properties?: unknown;
                                          conditions?: unknown;
                                          role?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                        };
                                      }[];
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                              };
                              blocked?: boolean;
                              preferedLanguage?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      slug: string;
      blogPosts?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            subtitle?: string;
            content?: string;
            excerpt?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            blogCategories?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  slug?: string;
                  SEO?: {
                    id?: number;
                    metaTitle?: string;
                    metaDescription?: string;
                    metaImage?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    keywords?: string;
                    metaRobots?: string;
                    structuredData?: unknown;
                    canonicalURL?: string;
                  };
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  description?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            blogAuthors?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  bio?: string;
                  avatar?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  slug?: string;
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  role?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            relatedPosts?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date */
            date?: string;
            readingTime?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      role?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["BlogAuthorListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    BlogAuthorResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["BlogAuthor"];
    };
    BlogAuthorResponse: {
      data?: components["schemas"]["BlogAuthorResponseDataObject"];
      meta?: Record<string, never>;
    };
    BlogCategoryLocalizationRequest: {
      title: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      blogPosts?: (number | string)[];
      description?: string;
      locale: string;
    };
    BlogCategoryRequest: {
      data: {
        title: string;
        slug: string;
        SEO?: components["schemas"]["SharedSeoComponent"];
        blogPosts?: (number | string)[];
        description?: string;
        locale?: string;
      };
    };
    BlogCategoryResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogCategory"];
    };
    BlogCategoryLocalizationResponse: {
      data?: components["schemas"]["BlogCategoryResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    BlogCategoryListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogCategory"];
    };
    BlogCategoryLocalizationListResponse: {
      data?: components["schemas"]["BlogCategoryListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogCategoryListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["BlogCategory"];
    };
    BlogCategoryListResponse: {
      data?: components["schemas"]["BlogCategoryListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogCategory: {
      title: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      blogPosts?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            subtitle?: string;
            content?: string;
            excerpt?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            blogCategories?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  slug?: string;
                  SEO?: {
                    id?: number;
                    metaTitle?: string;
                    metaDescription?: string;
                    metaImage?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    keywords?: string;
                    metaRobots?: string;
                    structuredData?: unknown;
                    canonicalURL?: string;
                  };
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  description?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            blogAuthors?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  bio?: string;
                  avatar?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  slug?: string;
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  role?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            relatedPosts?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date */
            date?: string;
            readingTime?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      description?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["BlogCategoryListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    BlogCategoryResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["BlogCategory"];
    };
    BlogCategoryResponse: {
      data?: components["schemas"]["BlogCategoryResponseDataObject"];
      meta?: Record<string, never>;
    };
    BlogPageLocalizationRequest: {
      featuredPosts?: (number | string)[];
      SEO?: components["schemas"]["SharedSeoComponent"];
      title: string;
      categoriesFilter?: (number | string)[];
      featuredCategories?: (number | string)[];
      locale: string;
    };
    BlogPageRequest: {
      data: {
        featuredPosts?: (number | string)[];
        SEO?: components["schemas"]["SharedSeoComponent"];
        title: string;
        categoriesFilter?: (number | string)[];
        featuredCategories?: (number | string)[];
        locale?: string;
      };
    };
    BlogPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogPage"];
    };
    BlogPageLocalizationResponse: {
      data?: components["schemas"]["BlogPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    BlogPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogPage"];
    };
    BlogPageLocalizationListResponse: {
      data?: components["schemas"]["BlogPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["BlogPage"];
    };
    BlogPageListResponse: {
      data?: components["schemas"]["BlogPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogPage: {
      featuredPosts?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            subtitle?: string;
            content?: string;
            excerpt?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          pathId?: number;
                          parent?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          children?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          files?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            code?: string;
                                            description?: string;
                                            users?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              }[];
                                            };
                                            permissions?: {
                                              data?: {
                                                id?: number;
                                                attributes?: {
                                                  action?: string;
                                                  actionParameters?: unknown;
                                                  subject?: string;
                                                  properties?: unknown;
                                                  conditions?: unknown;
                                                  role?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                };
                                              }[];
                                            };
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                          };
                                        }[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                          };
                          path?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            blogCategories?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  slug?: string;
                  SEO?: {
                    id?: number;
                    metaTitle?: string;
                    metaDescription?: string;
                    metaImage?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    keywords?: string;
                    metaRobots?: string;
                    structuredData?: unknown;
                    canonicalURL?: string;
                  };
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  description?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            blogAuthors?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  bio?: string;
                  avatar?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  slug?: string;
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  role?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            relatedPosts?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date */
            date?: string;
            readingTime?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      SEO?: components["schemas"]["SharedSeoComponent"];
      title: string;
      categoriesFilter?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        }[];
      };
      featuredCategories?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        }[];
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["BlogPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    BlogPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["BlogPage"];
    };
    BlogPageResponse: {
      data?: components["schemas"]["BlogPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    BlogPostLocalizationRequest: {
      title: string;
      slug: string;
      subtitle?: string;
      content?: string;
      excerpt?: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      blogCategories?: (number | string)[];
      blogAuthors?: (number | string)[];
      relatedPosts?: (number | string)[];
      /** @example string or id */
      image?: number | string;
      /** Format: date */
      date?: string;
      readingTime?: number;
      locale: string;
    };
    BlogPostRequest: {
      data: {
        title: string;
        slug: string;
        subtitle?: string;
        content?: string;
        excerpt?: string;
        SEO?: components["schemas"]["SharedSeoComponent"];
        blogCategories?: (number | string)[];
        blogAuthors?: (number | string)[];
        relatedPosts?: (number | string)[];
        /** @example string or id */
        image?: number | string;
        /** Format: date */
        date?: string;
        readingTime?: number;
        locale?: string;
      };
    };
    BlogPostResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogPost"];
    };
    BlogPostLocalizationResponse: {
      data?: components["schemas"]["BlogPostResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    BlogPostListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["BlogPost"];
    };
    BlogPostLocalizationListResponse: {
      data?: components["schemas"]["BlogPostListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogPostListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["BlogPost"];
    };
    BlogPostListResponse: {
      data?: components["schemas"]["BlogPostListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    BlogPost: {
      title: string;
      slug: string;
      subtitle?: string;
      content?: string;
      excerpt?: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      blogCategories?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            blogPosts?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  slug?: string;
                  subtitle?: string;
                  content?: string;
                  excerpt?: string;
                  SEO?: {
                    id?: number;
                    metaTitle?: string;
                    metaDescription?: string;
                    metaImage?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    keywords?: string;
                    metaRobots?: string;
                    structuredData?: unknown;
                    canonicalURL?: string;
                  };
                  blogCategories?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  blogAuthors?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        bio?: string;
                        avatar?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        slug?: string;
                        blogPosts?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        role?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        localizations?: {
                          data?: unknown[];
                        };
                        locale?: string;
                      };
                    }[];
                  };
                  relatedPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  image?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  /** Format: date */
                  date?: string;
                  readingTime?: number;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            description?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      blogAuthors?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        }[];
      };
      relatedPosts?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        }[];
      };
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** Format: date */
      date?: string;
      readingTime?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["BlogPostListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    BlogPostResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["BlogPost"];
    };
    BlogPostResponse: {
      data?: components["schemas"]["BlogPostResponseDataObject"];
      meta?: Record<string, never>;
    };
    DownloadLocalizationRequest: {
      title: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      bullets?: components["schemas"]["UiBulletWithImageComponent"][];
      info?: string;
      /** @example string or id */
      image?: number | string;
      /** @example string or id */
      menuIcon?: number | string;
      buttons?: components["schemas"]["UiButtonComponent"][];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneInstallComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      menuTitle?: string;
      minimumSupport?: string;
      locale: string;
    };
    DownloadRequest: {
      data: {
        title: string;
        slug: string;
        SEO?: components["schemas"]["SharedSeoComponent"];
        bullets?: components["schemas"]["UiBulletWithImageComponent"][];
        info?: string;
        /** @example string or id */
        image?: number | string;
        /** @example string or id */
        menuIcon?: number | string;
        buttons?: components["schemas"]["UiButtonComponent"][];
        dynamicZone?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneInstallComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        menuTitle?: string;
        minimumSupport?: string;
        locale?: string;
      };
    };
    DownloadResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Download"];
    };
    DownloadLocalizationResponse: {
      data?: components["schemas"]["DownloadResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    DownloadListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Download"];
    };
    DownloadLocalizationListResponse: {
      data?: components["schemas"]["DownloadListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    DownloadListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Download"];
    };
    DownloadListResponse: {
      data?: components["schemas"]["DownloadListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Download: {
      title: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      bullets?: components["schemas"]["UiBulletWithImageComponent"][];
      info?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      menuIcon?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      buttons?: components["schemas"]["UiButtonComponent"][];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneInstallComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      menuTitle?: string;
      minimumSupport?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["DownloadListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    DownloadResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Download"];
    };
    DownloadResponse: {
      data?: components["schemas"]["DownloadResponseDataObject"];
      meta?: Record<string, never>;
    };
    UiButtonComponent: {
      id?: number;
      title?: string;
      url?: string;
      /** @enum {string} */
      type?: "primary" | "outlined";
      /** @enum {string} */
      size?: "large" | "small";
    };
    DownloadsHowToDownloadComponent: {
      id?: number;
      menuTitle?: string;
      menuIcon?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      title?: string;
      content?: string;
      steps?: {
        id?: number;
        title?: string;
        content?: string;
      }[];
    };
    DynamicZoneInstallComponent: {
      id?: number;
      __component?: string;
      heading?: components["schemas"]["UiHeadingComponent"];
      subTitle?: string;
      versions?: components["schemas"]["DownloadsHowToDownloadComponent"][];
    };
    DownloadsMenuLocalizationRequest: {
      downloads?: (number | string)[];
      locale: string;
    };
    DownloadsMenuRequest: {
      data: {
        downloads?: (number | string)[];
        locale?: string;
      };
    };
    DownloadsMenuResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["DownloadsMenu"];
    };
    DownloadsMenuLocalizationResponse: {
      data?: components["schemas"]["DownloadsMenuResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    DownloadsMenuListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["DownloadsMenu"];
    };
    DownloadsMenuLocalizationListResponse: {
      data?: components["schemas"]["DownloadsMenuListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    DownloadsMenuListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["DownloadsMenu"];
    };
    DownloadsMenuListResponse: {
      data?: components["schemas"]["DownloadsMenuListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    DownloadsMenu: {
      downloads?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          pathId?: number;
                          parent?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          children?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          files?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            code?: string;
                                            description?: string;
                                            users?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              }[];
                                            };
                                            permissions?: {
                                              data?: {
                                                id?: number;
                                                attributes?: {
                                                  action?: string;
                                                  actionParameters?: unknown;
                                                  subject?: string;
                                                  properties?: unknown;
                                                  conditions?: unknown;
                                                  role?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                };
                                              }[];
                                            };
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                          };
                                        }[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                          };
                          path?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            bullets?: {
              id?: number;
              title?: string;
              text?: string;
              image?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
            }[];
            info?: string;
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            menuIcon?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            buttons?: {
              id?: number;
              title?: string;
              url?: string;
              /** @enum {string} */
              type?: "primary" | "outlined";
              /** @enum {string} */
              size?: "large" | "small";
            }[];
            dynamicZone?: (
              | {
                  id?: number;
                  __component?: string;
                  title?: string;
                  text?: string;
                  links?: {
                    id?: number;
                    title?: string;
                    url?: string;
                  }[];
                  media?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  /** @enum {string} */
                  direction?: "text-right" | "text-left";
                }
              | {
                  id?: number;
                  __component?: string;
                  title?: string;
                  links?: {
                    id?: number;
                    title?: string;
                    url?: string;
                  }[];
                  media?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  /** @enum {string} */
                  direction?: "text-right" | "text-left";
                  bullets?: {
                    id?: number;
                    title?: string;
                    text?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  tiles?: {
                    id?: number;
                    title?: string;
                    subtitle?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    url?: string;
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  subtitle?: string;
                  teamMembers?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        role?: string;
                        image?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        bio?: string;
                        socialNetworks?: {
                          id?: number;
                          links?: {
                            id?: number;
                            url?: string;
                            /** @enum {string} */
                            network?:
                              | "linkedin"
                              | "twitter"
                              | "wikipedia"
                              | "website";
                          }[];
                        };
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        localizations?: {
                          data?: unknown[];
                        };
                        locale?: string;
                      };
                    }[];
                  };
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  quotes?: {
                    id?: number;
                    title?: string;
                    quote?: string;
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                    /** @enum {string} */
                    style?: "h1" | "h2" | "h3" | "h4";
                    /** @enum {string} */
                    alignment?: "left" | "center";
                  };
                  text?: string;
                  primaryLinks?: {
                    id?: number;
                    title?: string;
                    url?: string;
                  }[];
                  secondaryLinks?: {
                    id?: number;
                    title?: string;
                    url?: string;
                  }[];
                  background?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  isStatic?: boolean;
                  images?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    }[];
                  };
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  tiles?: {
                    id?: number;
                    title?: string;
                    subtitle?: string;
                    text?: string;
                    label1?: string;
                    label2?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    button?: {
                      id?: number;
                      title?: string;
                      url?: string;
                    };
                    dataTable?: string;
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  blogPosts?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        title?: string;
                        slug?: string;
                        subtitle?: string;
                        content?: string;
                        excerpt?: string;
                        SEO?: {
                          id?: number;
                          metaTitle?: string;
                          metaDescription?: string;
                          metaImage?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          keywords?: string;
                          metaRobots?: string;
                          structuredData?: unknown;
                          canonicalURL?: string;
                        };
                        blogCategories?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              title?: string;
                              slug?: string;
                              SEO?: {
                                id?: number;
                                metaTitle?: string;
                                metaDescription?: string;
                                metaImage?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      name?: string;
                                      alternativeText?: string;
                                      caption?: string;
                                      width?: number;
                                      height?: number;
                                      formats?: unknown;
                                      hash?: string;
                                      ext?: string;
                                      mime?: string;
                                      /** Format: float */
                                      size?: number;
                                      url?: string;
                                      previewUrl?: string;
                                      provider?: string;
                                      provider_metadata?: unknown;
                                      related?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        }[];
                                      };
                                      folder?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      folderPath?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                keywords?: string;
                                metaRobots?: string;
                                structuredData?: unknown;
                                canonicalURL?: string;
                              };
                              blogPosts?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              description?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              /** Format: date-time */
                              publishedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              localizations?: {
                                data?: unknown[];
                              };
                              locale?: string;
                            };
                          }[];
                        };
                        blogAuthors?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              bio?: string;
                              avatar?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    alternativeText?: string;
                                    caption?: string;
                                    width?: number;
                                    height?: number;
                                    formats?: unknown;
                                    hash?: string;
                                    ext?: string;
                                    mime?: string;
                                    /** Format: float */
                                    size?: number;
                                    url?: string;
                                    previewUrl?: string;
                                    provider?: string;
                                    provider_metadata?: unknown;
                                    related?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                    };
                                    folder?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    folderPath?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                };
                              };
                              slug?: string;
                              blogPosts?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              role?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              /** Format: date-time */
                              publishedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              localizations?: {
                                data?: unknown[];
                              };
                              locale?: string;
                            };
                          }[];
                        };
                        relatedPosts?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        image?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        /** Format: date */
                        date?: string;
                        readingTime?: number;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        localizations?: {
                          data?: unknown[];
                        };
                        locale?: string;
                      };
                    }[];
                  };
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  subtitle?: string;
                  blocks?: {
                    id?: number;
                    title?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                  }[];
                  /** @enum {string} */
                  type?: "high-density" | "low-density";
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  questions?: {
                    id?: number;
                    question?: string;
                    answer?: string;
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  subTitle?: string;
                  versions?: {
                    id?: number;
                    menuTitle?: string;
                    menuIcon?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    title?: string;
                    content?: string;
                    steps?: {
                      id?: number;
                      title?: string;
                      content?: string;
                    }[];
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  slides?: {
                    id?: number;
                    text?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  heading?: {
                    id?: number;
                    title?: string;
                    /** @enum {string} */
                    level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
                  };
                  slides?: {
                    id?: number;
                    quote?: string;
                    source?: string;
                  }[];
                }
            )[];
            menuTitle?: string;
            minimumSupport?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["DownloadsMenuListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    DownloadsMenuResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["DownloadsMenu"];
    };
    DownloadsMenuResponse: {
      data?: components["schemas"]["DownloadsMenuResponseDataObject"];
      meta?: Record<string, never>;
    };
    FeatureLocalizationRequest: {
      title: string;
      description?: string;
      featureCategories?: (number | string)[];
      available?: boolean;
      /** @example string or id */
      icon?: number | string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      content?: string;
      locale: string;
    };
    FeatureRequest: {
      data: {
        title: string;
        description?: string;
        featureCategories?: (number | string)[];
        available?: boolean;
        /** @example string or id */
        icon?: number | string;
        slug: string;
        SEO?: components["schemas"]["SharedSeoComponent"];
        content?: string;
        locale?: string;
      };
    };
    FeatureResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Feature"];
    };
    FeatureLocalizationResponse: {
      data?: components["schemas"]["FeatureResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    FeatureListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Feature"];
    };
    FeatureLocalizationListResponse: {
      data?: components["schemas"]["FeatureListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FeatureListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Feature"];
    };
    FeatureListResponse: {
      data?: components["schemas"]["FeatureListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Feature: {
      title: string;
      description?: string;
      featureCategories?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            features?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  description?: string;
                  featureCategories?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  available?: boolean;
                  icon?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              pathId?: number;
                              parent?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              children?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              files?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    alternativeText?: string;
                                    caption?: string;
                                    width?: number;
                                    height?: number;
                                    formats?: unknown;
                                    hash?: string;
                                    ext?: string;
                                    mime?: string;
                                    /** Format: float */
                                    size?: number;
                                    url?: string;
                                    previewUrl?: string;
                                    provider?: string;
                                    provider_metadata?: unknown;
                                    related?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                    };
                                    folder?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    folderPath?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          firstname?: string;
                                          lastname?: string;
                                          username?: string;
                                          /** Format: email */
                                          email?: string;
                                          resetPasswordToken?: string;
                                          registrationToken?: string;
                                          isActive?: boolean;
                                          roles?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                code?: string;
                                                description?: string;
                                                users?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<
                                                      string,
                                                      never
                                                    >;
                                                  }[];
                                                };
                                                permissions?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      action?: string;
                                                      actionParameters?: unknown;
                                                      subject?: string;
                                                      properties?: unknown;
                                                      conditions?: unknown;
                                                      role?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<
                                                            string,
                                                            never
                                                          >;
                                                        };
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<
                                                            string,
                                                            never
                                                          >;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<
                                                            string,
                                                            never
                                                          >;
                                                        };
                                                      };
                                                    };
                                                  }[];
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<
                                                      string,
                                                      never
                                                    >;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<
                                                      string,
                                                      never
                                                    >;
                                                  };
                                                };
                                              };
                                            }[];
                                          };
                                          blocked?: boolean;
                                          preferedLanguage?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                        };
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                              };
                              path?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  slug?: string;
                  SEO?: {
                    id?: number;
                    metaTitle?: string;
                    metaDescription?: string;
                    metaImage?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    keywords?: string;
                    metaRobots?: string;
                    structuredData?: unknown;
                    canonicalURL?: string;
                  };
                  content?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      available?: boolean;
      icon?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      content?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["FeatureListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    FeatureResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Feature"];
    };
    FeatureResponse: {
      data?: components["schemas"]["FeatureResponseDataObject"];
      meta?: Record<string, never>;
    };
    FeatureCategoryLocalizationRequest: {
      title: string;
      features?: (number | string)[];
      locale: string;
    };
    FeatureCategoryRequest: {
      data: {
        title: string;
        features?: (number | string)[];
        locale?: string;
      };
    };
    FeatureCategoryResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["FeatureCategory"];
    };
    FeatureCategoryLocalizationResponse: {
      data?: components["schemas"]["FeatureCategoryResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    FeatureCategoryListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["FeatureCategory"];
    };
    FeatureCategoryLocalizationListResponse: {
      data?: components["schemas"]["FeatureCategoryListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FeatureCategoryListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["FeatureCategory"];
    };
    FeatureCategoryListResponse: {
      data?: components["schemas"]["FeatureCategoryListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FeatureCategory: {
      title: string;
      features?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            description?: string;
            featureCategories?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  features?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        firstname?: string;
                        lastname?: string;
                        username?: string;
                        /** Format: email */
                        email?: string;
                        resetPasswordToken?: string;
                        registrationToken?: string;
                        isActive?: boolean;
                        roles?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              code?: string;
                              description?: string;
                              users?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              permissions?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    action?: string;
                                    actionParameters?: unknown;
                                    subject?: string;
                                    properties?: unknown;
                                    conditions?: unknown;
                                    role?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                              };
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          }[];
                        };
                        blocked?: boolean;
                        preferedLanguage?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            available?: boolean;
            icon?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        pathId?: number;
                        parent?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        children?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        files?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          }[];
                        };
                        path?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            slug?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            content?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["FeatureCategoryListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    FeatureCategoryResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["FeatureCategory"];
    };
    FeatureCategoryResponse: {
      data?: components["schemas"]["FeatureCategoryResponseDataObject"];
      meta?: Record<string, never>;
    };
    FeaturesPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      featureCategories?: (number | string)[];
      dynamicZoneTop?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      dynamicZoneBottom?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      locale: string;
    };
    FeaturesPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        featureCategories?: (number | string)[];
        dynamicZoneTop?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        dynamicZoneBottom?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        locale?: string;
      };
    };
    FeaturesPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["FeaturesPage"];
    };
    FeaturesPageLocalizationResponse: {
      data?: components["schemas"]["FeaturesPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    FeaturesPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["FeaturesPage"];
    };
    FeaturesPageLocalizationListResponse: {
      data?: components["schemas"]["FeaturesPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FeaturesPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["FeaturesPage"];
    };
    FeaturesPageListResponse: {
      data?: components["schemas"]["FeaturesPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FeaturesPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      featureCategories?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            features?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  description?: string;
                  featureCategories?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  available?: boolean;
                  icon?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  slug?: string;
                  SEO?: {
                    id?: number;
                    metaTitle?: string;
                    metaDescription?: string;
                    metaImage?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    keywords?: string;
                    metaRobots?: string;
                    structuredData?: unknown;
                    canonicalURL?: string;
                  };
                  content?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      dynamicZoneTop?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      dynamicZoneBottom?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["FeaturesPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    FeaturesPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["FeaturesPage"];
    };
    FeaturesPageResponse: {
      data?: components["schemas"]["FeaturesPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    FooterLocalizationRequest: {
      legalContent1?: string;
      legalContent2?: string;
      linkBlocks?: components["schemas"]["FooterLinkBlockComponent"][];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      locale: string;
    };
    FooterRequest: {
      data: {
        legalContent1?: string;
        legalContent2?: string;
        linkBlocks?: components["schemas"]["FooterLinkBlockComponent"][];
        dynamicZone?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        locale?: string;
      };
    };
    FooterResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterLocalizationResponse: {
      data?: components["schemas"]["FooterResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    FooterListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterLocalizationListResponse: {
      data?: components["schemas"]["FooterListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FooterListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterListResponse: {
      data?: components["schemas"]["FooterListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Footer: {
      legalContent1?: string;
      legalContent2?: string;
      linkBlocks?: components["schemas"]["FooterLinkBlockComponent"][];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["FooterListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    FooterResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterResponse: {
      data?: components["schemas"]["FooterResponseDataObject"];
      meta?: Record<string, never>;
    };
    FooterLinkBlockComponent: {
      id?: number;
      heading?: {
        id?: number;
        title?: string;
        /** @enum {string} */
        level?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
      };
      links?: {
        id?: number;
        title?: string;
        url?: string;
      }[];
    };
    GlossaryPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      locale: string;
    };
    GlossaryPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        locale?: string;
      };
    };
    GlossaryPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["GlossaryPage"];
    };
    GlossaryPageLocalizationResponse: {
      data?: components["schemas"]["GlossaryPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    GlossaryPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["GlossaryPage"];
    };
    GlossaryPageLocalizationListResponse: {
      data?: components["schemas"]["GlossaryPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    GlossaryPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["GlossaryPage"];
    };
    GlossaryPageListResponse: {
      data?: components["schemas"]["GlossaryPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    GlossaryPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["GlossaryPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    GlossaryPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["GlossaryPage"];
    };
    GlossaryPageResponse: {
      data?: components["schemas"]["GlossaryPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    GlossaryTermLocalizationRequest: {
      title?: string;
      description?: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      locale: string;
    };
    GlossaryTermRequest: {
      data: {
        title?: string;
        description?: string;
        slug: string;
        SEO?: components["schemas"]["SharedSeoComponent"];
        locale?: string;
      };
    };
    GlossaryTermResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["GlossaryTerm"];
    };
    GlossaryTermLocalizationResponse: {
      data?: components["schemas"]["GlossaryTermResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    GlossaryTermListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["GlossaryTerm"];
    };
    GlossaryTermLocalizationListResponse: {
      data?: components["schemas"]["GlossaryTermListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    GlossaryTermListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["GlossaryTerm"];
    };
    GlossaryTermListResponse: {
      data?: components["schemas"]["GlossaryTermListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    GlossaryTerm: {
      title?: string;
      description?: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["GlossaryTermListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    GlossaryTermResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["GlossaryTerm"];
    };
    GlossaryTermResponse: {
      data?: components["schemas"]["GlossaryTermResponseDataObject"];
      meta?: Record<string, never>;
    };
    HomePageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      locale: string;
    };
    HomePageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        dynamicZone?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        locale?: string;
      };
    };
    HomePageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageLocalizationResponse: {
      data?: components["schemas"]["HomePageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    HomePageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageLocalizationListResponse: {
      data?: components["schemas"]["HomePageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    HomePageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageListResponse: {
      data?: components["schemas"]["HomePageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    HomePage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["HomePageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    HomePageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageResponse: {
      data?: components["schemas"]["HomePageResponseDataObject"];
      meta?: Record<string, never>;
    };
    LitepaperLocalizationRequest: {
      title: string;
      content?: string;
      /** @example string or id */
      pdf?: number | string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      locale: string;
    };
    LitepaperRequest: {
      data: {
        title: string;
        content?: string;
        /** @example string or id */
        pdf?: number | string;
        SEO?: components["schemas"]["SharedSeoComponent"];
        locale?: string;
      };
    };
    LitepaperResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Litepaper"];
    };
    LitepaperLocalizationResponse: {
      data?: components["schemas"]["LitepaperResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    LitepaperListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Litepaper"];
    };
    LitepaperLocalizationListResponse: {
      data?: components["schemas"]["LitepaperListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    LitepaperListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Litepaper"];
    };
    LitepaperListResponse: {
      data?: components["schemas"]["LitepaperListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Litepaper: {
      title: string;
      content?: string;
      pdf?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  files?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              firstname?: string;
                              lastname?: string;
                              username?: string;
                              /** Format: email */
                              email?: string;
                              resetPasswordToken?: string;
                              registrationToken?: string;
                              isActive?: boolean;
                              roles?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    code?: string;
                                    description?: string;
                                    users?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                    };
                                    permissions?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          action?: string;
                                          actionParameters?: unknown;
                                          subject?: string;
                                          properties?: unknown;
                                          conditions?: unknown;
                                          role?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                        };
                                      }[];
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                              };
                              blocked?: boolean;
                              preferedLanguage?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      SEO?: components["schemas"]["SharedSeoComponent"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["LitepaperListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    LitepaperResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Litepaper"];
    };
    LitepaperResponse: {
      data?: components["schemas"]["LitepaperResponseDataObject"];
      meta?: Record<string, never>;
    };
    NavigationLocalizationRequest: {
      links?: components["schemas"]["NavigationNavigationItemComponent"][];
      button?: components["schemas"]["UiLinkComponent"];
      backText?: string;
      locale: string;
    };
    NavigationRequest: {
      data: {
        links?: components["schemas"]["NavigationNavigationItemComponent"][];
        button?: components["schemas"]["UiLinkComponent"];
        backText?: string;
        locale?: string;
      };
    };
    NavigationResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Navigation"];
    };
    NavigationLocalizationResponse: {
      data?: components["schemas"]["NavigationResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    NavigationListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Navigation"];
    };
    NavigationLocalizationListResponse: {
      data?: components["schemas"]["NavigationListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    NavigationListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Navigation"];
    };
    NavigationListResponse: {
      data?: components["schemas"]["NavigationListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Navigation: {
      links?: components["schemas"]["NavigationNavigationItemComponent"][];
      button?: components["schemas"]["UiLinkComponent"];
      backText?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["NavigationListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    NavigationResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Navigation"];
    };
    NavigationResponse: {
      data?: components["schemas"]["NavigationResponseDataObject"];
      meta?: Record<string, never>;
    };
    NavigationNavigationItemComponent: {
      id?: number;
      title?: string;
      url?: string;
      subItems?: {
        id?: number;
        title?: string;
        description?: string;
        url?: string;
      }[];
      subPanel?: {
        id?: number;
        title?: string;
        url?: string;
        links?: {
          id?: number;
          title?: string;
          links?: {
            id?: number;
            title?: string;
            url?: string;
            icon?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        pathId?: number;
                        parent?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        children?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        files?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    firstname?: string;
                                    lastname?: string;
                                    username?: string;
                                    /** Format: email */
                                    email?: string;
                                    resetPasswordToken?: string;
                                    registrationToken?: string;
                                    isActive?: boolean;
                                    roles?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          code?: string;
                                          description?: string;
                                          users?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            }[];
                                          };
                                          permissions?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<
                                                      string,
                                                      never
                                                    >;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<
                                                      string,
                                                      never
                                                    >;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<
                                                      string,
                                                      never
                                                    >;
                                                  };
                                                };
                                              };
                                            }[];
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                        };
                                      }[];
                                    };
                                    blocked?: boolean;
                                    preferedLanguage?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          }[];
                        };
                        path?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
          }[];
        }[];
      };
    };
    NetworkPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      locale: string;
    };
    NetworkPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        dynamicZone?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        locale?: string;
      };
    };
    NetworkPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["NetworkPage"];
    };
    NetworkPageLocalizationResponse: {
      data?: components["schemas"]["NetworkPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    NetworkPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["NetworkPage"];
    };
    NetworkPageLocalizationListResponse: {
      data?: components["schemas"]["NetworkPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    NetworkPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["NetworkPage"];
    };
    NetworkPageListResponse: {
      data?: components["schemas"]["NetworkPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    NetworkPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["NetworkPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    NetworkPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["NetworkPage"];
    };
    NetworkPageResponse: {
      data?: components["schemas"]["NetworkPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    PageNotFoundLocalizationRequest: {
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneRichTextComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      locale: string;
    };
    PageNotFoundRequest: {
      data: {
        dynamicZone?: (
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneRichTextComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        locale?: string;
      };
    };
    PageNotFoundResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["PageNotFound"];
    };
    PageNotFoundLocalizationResponse: {
      data?: components["schemas"]["PageNotFoundResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    PageNotFoundListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["PageNotFound"];
    };
    PageNotFoundLocalizationListResponse: {
      data?: components["schemas"]["PageNotFoundListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PageNotFoundListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["PageNotFound"];
    };
    PageNotFoundListResponse: {
      data?: components["schemas"]["PageNotFoundListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PageNotFound: {
      dynamicZone?: (
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneRichTextComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["PageNotFoundListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    PageNotFoundResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["PageNotFound"];
    };
    PageNotFoundResponse: {
      data?: components["schemas"]["PageNotFoundResponseDataObject"];
      meta?: Record<string, never>;
    };
    PressPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      locale: string;
    };
    PressPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        locale?: string;
      };
    };
    PressPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["PressPage"];
    };
    PressPageLocalizationResponse: {
      data?: components["schemas"]["PressPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    PressPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["PressPage"];
    };
    PressPageLocalizationListResponse: {
      data?: components["schemas"]["PressPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PressPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["PressPage"];
    };
    PressPageListResponse: {
      data?: components["schemas"]["PressPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PressPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["PressPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    PressPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["PressPage"];
    };
    PressPageResponse: {
      data?: components["schemas"]["PressPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    PressPostLocalizationRequest: {
      title: string;
      /** Format: date */
      date?: string;
      url: string;
      locale: string;
    };
    PressPostRequest: {
      data: {
        title: string;
        /** Format: date */
        date?: string;
        url: string;
        locale?: string;
      };
    };
    PressPostResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["PressPost"];
    };
    PressPostLocalizationResponse: {
      data?: components["schemas"]["PressPostResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    PressPostListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["PressPost"];
    };
    PressPostLocalizationListResponse: {
      data?: components["schemas"]["PressPostListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PressPostListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["PressPost"];
    };
    PressPostListResponse: {
      data?: components["schemas"]["PressPostListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PressPost: {
      title: string;
      /** Format: date */
      date?: string;
      url: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: {
            firstname?: string;
            lastname?: string;
            username?: string;
            /** Format: email */
            email?: string;
            resetPasswordToken?: string;
            registrationToken?: string;
            isActive?: boolean;
            roles?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  code?: string;
                  description?: string;
                  users?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  permissions?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        action?: string;
                        actionParameters?: unknown;
                        subject?: string;
                        properties?: unknown;
                        conditions?: unknown;
                        role?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              }[];
            };
            blocked?: boolean;
            preferedLanguage?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["PressPostListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    PressPostResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["PressPost"];
    };
    PressPostResponse: {
      data?: components["schemas"]["PressPostResponseDataObject"];
      meta?: Record<string, never>;
    };
    TeamMemberLocalizationRequest: {
      name?: string;
      role?: string;
      /** @example string or id */
      image?: number | string;
      bio?: string;
      socialNetworks?: components["schemas"]["SocialSocialsComponent"];
      locale: string;
    };
    TeamMemberRequest: {
      data: {
        name?: string;
        role?: string;
        /** @example string or id */
        image?: number | string;
        bio?: string;
        socialNetworks?: components["schemas"]["SocialSocialsComponent"];
        locale?: string;
      };
    };
    TeamMemberResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["TeamMember"];
    };
    TeamMemberLocalizationResponse: {
      data?: components["schemas"]["TeamMemberResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    TeamMemberListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["TeamMember"];
    };
    TeamMemberLocalizationListResponse: {
      data?: components["schemas"]["TeamMemberListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TeamMemberListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["TeamMember"];
    };
    TeamMemberListResponse: {
      data?: components["schemas"]["TeamMemberListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TeamMember: {
      name?: string;
      role?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  files?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              firstname?: string;
                              lastname?: string;
                              username?: string;
                              /** Format: email */
                              email?: string;
                              resetPasswordToken?: string;
                              registrationToken?: string;
                              isActive?: boolean;
                              roles?: {
                                data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    code?: string;
                                    description?: string;
                                    users?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                    };
                                    permissions?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          action?: string;
                                          actionParameters?: unknown;
                                          subject?: string;
                                          properties?: unknown;
                                          conditions?: unknown;
                                          role?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<
                                                string,
                                                never
                                              >;
                                            };
                                          };
                                        };
                                      }[];
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                              };
                              blocked?: boolean;
                              preferedLanguage?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      bio?: string;
      socialNetworks?: components["schemas"]["SocialSocialsComponent"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["TeamMemberListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    TeamMemberResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["TeamMember"];
    };
    TeamMemberResponse: {
      data?: components["schemas"]["TeamMemberResponseDataObject"];
      meta?: Record<string, never>;
    };
    SocialSocialsComponent: {
      id?: number;
      links?: {
        id?: number;
        url?: string;
        /** @enum {string} */
        network?: "linkedin" | "twitter" | "wikipedia" | "website";
      }[];
    };
    TrustCenterAdvisorsPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
      )[];
      title?: string;
      locale: string;
    };
    TrustCenterAdvisorsPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        dynamicZone?: (
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
        )[];
        title?: string;
        locale?: string;
      };
    };
    TrustCenterAdvisorsPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterAdvisorsPage"];
    };
    TrustCenterAdvisorsPageLocalizationResponse: {
      data?: components["schemas"]["TrustCenterAdvisorsPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    TrustCenterAdvisorsPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterAdvisorsPage"];
    };
    TrustCenterAdvisorsPageLocalizationListResponse: {
      data?: components["schemas"]["TrustCenterAdvisorsPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterAdvisorsPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterAdvisorsPage"];
    };
    TrustCenterAdvisorsPageListResponse: {
      data?: components["schemas"]["TrustCenterAdvisorsPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterAdvisorsPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
      )[];
      title?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["TrustCenterAdvisorsPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    TrustCenterAdvisorsPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterAdvisorsPage"];
    };
    TrustCenterAdvisorsPageResponse: {
      data?: components["schemas"]["TrustCenterAdvisorsPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    TrustCenterCategoryLocalizationRequest: {
      title: string;
      description?: string;
      slug: string;
      trustCenterPosts?: (number | string)[];
      locale: string;
    };
    TrustCenterCategoryRequest: {
      data: {
        title: string;
        description?: string;
        slug: string;
        trustCenterPosts?: (number | string)[];
        locale?: string;
      };
    };
    TrustCenterCategoryResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterCategory"];
    };
    TrustCenterCategoryLocalizationResponse: {
      data?: components["schemas"]["TrustCenterCategoryResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    TrustCenterCategoryListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterCategory"];
    };
    TrustCenterCategoryLocalizationListResponse: {
      data?: components["schemas"]["TrustCenterCategoryListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterCategoryListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterCategory"];
    };
    TrustCenterCategoryListResponse: {
      data?: components["schemas"]["TrustCenterCategoryListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterCategory: {
      title: string;
      description?: string;
      slug: string;
      trustCenterPosts?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            excerpt?: string;
            isLink?: boolean;
            link?: string;
            relatedTrustCenterPosts?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            dynamicZone?: (
              | {
                  id?: number;
                  __component?: string;
                  items?: {
                    id?: number;
                    title?: string;
                    url?: string;
                    authors?: string;
                    published?: string;
                    date?: string;
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  items?: {
                    id?: number;
                    title?: string;
                    url?: string;
                    company?: string;
                    authors?: string;
                    date?: string;
                  }[];
                }
            )[];
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          pathId?: number;
                          parent?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          children?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          files?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            code?: string;
                                            description?: string;
                                            users?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              }[];
                                            };
                                            permissions?: {
                                              data?: {
                                                id?: number;
                                                attributes?: {
                                                  action?: string;
                                                  actionParameters?: unknown;
                                                  subject?: string;
                                                  properties?: unknown;
                                                  conditions?: unknown;
                                                  role?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                };
                                              }[];
                                            };
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                          };
                                        }[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                          };
                          path?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            content?: string;
            readingTime?: number;
            trustCenterCategory?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  description?: string;
                  slug?: string;
                  trustCenterPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              };
            };
            subtitle?: string;
            /** Format: date */
            date?: string;
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["TrustCenterCategoryListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    TrustCenterCategoryResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterCategory"];
    };
    TrustCenterCategoryResponse: {
      data?: components["schemas"]["TrustCenterCategoryResponseDataObject"];
      meta?: Record<string, never>;
    };
    TrustCenterPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      title?: string;
      locale: string;
    };
    TrustCenterPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        title?: string;
        locale?: string;
      };
    };
    TrustCenterPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPage"];
    };
    TrustCenterPageLocalizationResponse: {
      data?: components["schemas"]["TrustCenterPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    TrustCenterPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPage"];
    };
    TrustCenterPageLocalizationListResponse: {
      data?: components["schemas"]["TrustCenterPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPage"];
    };
    TrustCenterPageListResponse: {
      data?: components["schemas"]["TrustCenterPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      title?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["TrustCenterPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    TrustCenterPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPage"];
    };
    TrustCenterPageResponse: {
      data?: components["schemas"]["TrustCenterPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    TrustCenterPostLocalizationRequest: {
      title: string;
      slug?: string;
      excerpt?: string;
      isLink?: boolean;
      link?: string;
      relatedTrustCenterPosts?: (number | string)[];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneDocumentListComponent"]
        | components["schemas"]["DynamicZoneAuditListComponent"]
      )[];
      SEO?: components["schemas"]["SharedSeoComponent"];
      content?: string;
      readingTime?: number;
      /** @example string or id */
      trustCenterCategory?: number | string;
      subtitle?: string;
      /** Format: date */
      date?: string;
      /** @example string or id */
      image?: number | string;
      locale: string;
    };
    TrustCenterPostRequest: {
      data: {
        title: string;
        slug?: string;
        excerpt?: string;
        isLink?: boolean;
        link?: string;
        relatedTrustCenterPosts?: (number | string)[];
        dynamicZone?: (
          | components["schemas"]["DynamicZoneDocumentListComponent"]
          | components["schemas"]["DynamicZoneAuditListComponent"]
        )[];
        SEO?: components["schemas"]["SharedSeoComponent"];
        content?: string;
        readingTime?: number;
        /** @example string or id */
        trustCenterCategory?: number | string;
        subtitle?: string;
        /** Format: date */
        date?: string;
        /** @example string or id */
        image?: number | string;
        locale?: string;
      };
    };
    TrustCenterPostResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPost"];
    };
    TrustCenterPostLocalizationResponse: {
      data?: components["schemas"]["TrustCenterPostResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    TrustCenterPostListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPost"];
    };
    TrustCenterPostLocalizationListResponse: {
      data?: components["schemas"]["TrustCenterPostListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterPostListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPost"];
    };
    TrustCenterPostListResponse: {
      data?: components["schemas"]["TrustCenterPostListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TrustCenterPost: {
      title: string;
      slug?: string;
      excerpt?: string;
      isLink?: boolean;
      link?: string;
      relatedTrustCenterPosts?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            slug?: string;
            excerpt?: string;
            isLink?: boolean;
            link?: string;
            relatedTrustCenterPosts?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            dynamicZone?: (
              | {
                  id?: number;
                  __component?: string;
                  items?: {
                    id?: number;
                    title?: string;
                    url?: string;
                    authors?: string;
                    published?: string;
                    date?: string;
                  }[];
                }
              | {
                  id?: number;
                  __component?: string;
                  items?: {
                    id?: number;
                    title?: string;
                    url?: string;
                    company?: string;
                    authors?: string;
                    date?: string;
                  }[];
                }
            )[];
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          pathId?: number;
                          parent?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          children?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          files?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            code?: string;
                                            description?: string;
                                            users?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              }[];
                                            };
                                            permissions?: {
                                              data?: {
                                                id?: number;
                                                attributes?: {
                                                  action?: string;
                                                  actionParameters?: unknown;
                                                  subject?: string;
                                                  properties?: unknown;
                                                  conditions?: unknown;
                                                  role?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<
                                                        string,
                                                        never
                                                      >;
                                                    };
                                                  };
                                                };
                                              }[];
                                            };
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<
                                                  string,
                                                  never
                                                >;
                                              };
                                            };
                                          };
                                        }[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                          };
                          path?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            content?: string;
            readingTime?: number;
            trustCenterCategory?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  description?: string;
                  slug?: string;
                  trustCenterPosts?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              };
            };
            subtitle?: string;
            /** Format: date */
            date?: string;
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      dynamicZone?: (
        | components["schemas"]["DynamicZoneDocumentListComponent"]
        | components["schemas"]["DynamicZoneAuditListComponent"]
      )[];
      SEO?: components["schemas"]["SharedSeoComponent"];
      content?: string;
      readingTime?: number;
      trustCenterCategory?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      subtitle?: string;
      /** Format: date */
      date?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["TrustCenterPostListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    TrustCenterPostResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["TrustCenterPost"];
    };
    TrustCenterPostResponse: {
      data?: components["schemas"]["TrustCenterPostResponseDataObject"];
      meta?: Record<string, never>;
    };
    DynamicZoneDocumentListItemComponent: {
      id?: number;
      title?: string;
      url?: string;
      authors?: string;
      published?: string;
      date?: string;
    };
    DynamicZoneDocumentListComponent: {
      id?: number;
      __component?: string;
      items?: components["schemas"]["DynamicZoneDocumentListItemComponent"][];
    };
    DynamicZoneAuditListItemComponent: {
      id?: number;
      title?: string;
      url?: string;
      company?: string;
      authors?: string;
      date?: string;
    };
    DynamicZoneAuditListComponent: {
      id?: number;
      __component?: string;
      items?: components["schemas"]["DynamicZoneAuditListItemComponent"][];
    };
    UseCaseLocalizationRequest: {
      title: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      excerpt?: string;
      features?: (number | string)[];
      locale: string;
    };
    UseCaseRequest: {
      data: {
        title: string;
        slug: string;
        SEO?: components["schemas"]["SharedSeoComponent"];
        excerpt?: string;
        features?: (number | string)[];
        locale?: string;
      };
    };
    UseCaseResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["UseCase"];
    };
    UseCaseLocalizationResponse: {
      data?: components["schemas"]["UseCaseResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    UseCaseListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["UseCase"];
    };
    UseCaseLocalizationListResponse: {
      data?: components["schemas"]["UseCaseListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    UseCaseListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["UseCase"];
    };
    UseCaseListResponse: {
      data?: components["schemas"]["UseCaseListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    UseCase: {
      title: string;
      slug: string;
      SEO?: components["schemas"]["SharedSeoComponent"];
      excerpt?: string;
      features?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            description?: string;
            featureCategories?: {
              data?: {
                id?: number;
                attributes?: {
                  title?: string;
                  features?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              }[];
            };
            available?: boolean;
            icon?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            slug?: string;
            SEO?: {
              id?: number;
              metaTitle?: string;
              metaDescription?: string;
              metaImage?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              keywords?: string;
              metaRobots?: string;
              structuredData?: unknown;
              canonicalURL?: string;
            };
            content?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        }[];
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["UseCaseListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    UseCaseResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["UseCase"];
    };
    UseCaseResponse: {
      data?: components["schemas"]["UseCaseResponseDataObject"];
      meta?: Record<string, never>;
    };
    UseCasesPageLocalizationRequest: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      locale: string;
    };
    UseCasesPageRequest: {
      data: {
        SEO?: components["schemas"]["SharedSeoComponent"];
        dynamicZone?: (
          | components["schemas"]["DynamicZoneBlogPostsComponent"]
          | components["schemas"]["FaqsFaQsComponent"]
          | components["schemas"]["DynamicZoneBlocksComponent"]
          | components["schemas"]["DynamicZoneTilesComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
          | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
          | components["schemas"]["DynamicZoneTeamMembersComponent"]
          | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
          | components["schemas"]["DynamicZoneLogoCarouselComponent"]
          | components["schemas"]["DynamicZoneContentTilesComponent"]
          | components["schemas"]["DynamicZoneQuotesComponent"]
          | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
          | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
        )[];
        locale?: string;
      };
    };
    UseCasesPageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["UseCasesPage"];
    };
    UseCasesPageLocalizationResponse: {
      data?: components["schemas"]["UseCasesPageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    UseCasesPageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["UseCasesPage"];
    };
    UseCasesPageLocalizationListResponse: {
      data?: components["schemas"]["UseCasesPageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    UseCasesPageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["UseCasesPage"];
    };
    UseCasesPageListResponse: {
      data?: components["schemas"]["UseCasesPageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    UseCasesPage: {
      SEO?: components["schemas"]["SharedSeoComponent"];
      dynamicZone?: (
        | components["schemas"]["DynamicZoneBlogPostsComponent"]
        | components["schemas"]["FaqsFaQsComponent"]
        | components["schemas"]["DynamicZoneBlocksComponent"]
        | components["schemas"]["DynamicZoneTilesComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithTextComponent"]
        | components["schemas"]["DynamicZoneValuePropositionWithBulletsComponent"]
        | components["schemas"]["DynamicZoneTeamMembersComponent"]
        | components["schemas"]["DynamicZoneParagraphWithTitleComponent"]
        | components["schemas"]["DynamicZoneLogoCarouselComponent"]
        | components["schemas"]["DynamicZoneContentTilesComponent"]
        | components["schemas"]["DynamicZoneQuotesComponent"]
        | components["schemas"]["DynamicZoneCarouselTextImageComponent"]
        | components["schemas"]["DynamicZoneCarouselQuoteComponent"]
      )[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["UseCasesPageListResponseDataItemLocalized"][];
      };
      locale?: string;
    };
    UseCasesPageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["UseCasesPage"];
    };
    UseCasesPageResponse: {
      data?: components["schemas"]["UseCasesPageResponseDataObject"];
      meta?: Record<string, never>;
    };
    UploadFile: {
      id?: number;
      name?: string;
      alternativeText?: string;
      caption?: string;
      /** Format: integer */
      width?: number;
      /** Format: integer */
      height?: number;
      formats?: number;
      hash?: string;
      ext?: string;
      mime?: string;
      /** Format: double */
      size?: number;
      url?: string;
      previewUrl?: string;
      provider?: string;
      provider_metadata?: Record<string, never>;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Users-Permissions-Role": {
      id?: number;
      name?: string;
      description?: string;
      type?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Users-Permissions-User": {
      /** @example 1 */
      id?: number;
      /** @example foo.bar */
      username?: string;
      /** @example foo.bar@strapi.io */
      email?: string;
      /** @example local */
      provider?: string;
      /** @example true */
      confirmed?: boolean;
      /** @example false */
      blocked?: boolean;
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.258Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.267Z
       */
      updatedAt?: string;
    };
    "Users-Permissions-UserRegistration": {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
      jwt?: string;
      user?: components["schemas"]["Users-Permissions-User"];
    };
    "Users-Permissions-PermissionsTree": {
      [key: string]: {
        /** @description every controller of the api */
        controllers?: {
          [key: string]: {
            [key: string]: {
              enabled?: boolean;
              policy?: string;
            };
          };
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: {
    "Users-Permissions-RoleRequest": {
      content: {
        /** @example {
         *       "name": "foo",
         *       "description": "role foo",
         *       "permissions": {
         *         "api::content-type.content-type": {
         *           "controllers": {
         *             "controllerA": {
         *               "find": {
         *                 "enabled": true
         *               }
         *             }
         *           }
         *         }
         *       }
         *     } */
        "application/json": {
          name?: string;
          description?: string;
          type?: string;
          permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "get/about-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AboutPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/about-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AboutPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/about-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/about-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AboutPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/basic-pages": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BasicPageListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/basic-pages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BasicPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BasicPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/basic-pages/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BasicPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/basic-pages/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BasicPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BasicPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/basic-pages/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/basic-pages/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BasicPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BasicPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/blog-authors": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogAuthorListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/blog-authors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogAuthorRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogAuthorResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/blog-authors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogAuthorResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/blog-authors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogAuthorRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogAuthorResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/blog-authors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/blog-authors/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogAuthorLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogAuthorLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/blog-categories": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogCategoryListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/blog-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/blog-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/blog-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/blog-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/blog-categories/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogCategoryLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogCategoryLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/blog-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/blog-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/blog-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/blog-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/blog-posts": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPostListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/blog-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogPostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/blog-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/blog-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogPostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/blog-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/blog-posts/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlogPostLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BlogPostLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/downloads": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/downloads": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DownloadRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/downloads/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/downloads/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DownloadRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/downloads/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/downloads/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DownloadLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/downloads-menu": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadsMenuResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/downloads-menu": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DownloadsMenuRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadsMenuResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/downloads-menu": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/downloads-menu/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DownloadsMenuLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DownloadsMenuLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/features": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/features": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/features/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/features/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/features/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/features/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/feature-categories": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureCategoryListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/feature-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/feature-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/feature-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/feature-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/feature-categories/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureCategoryLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeatureCategoryLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/features-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeaturesPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/features-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeaturesPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeaturesPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/features-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/features-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeaturesPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FeaturesPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/footer": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FooterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/footer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FooterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FooterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/footer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/footer/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FooterLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FooterLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/glossary-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/glossary-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlossaryPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/glossary-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/glossary-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlossaryPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/glossary-terms": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryTermListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/glossary-terms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlossaryTermRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryTermResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/glossary-terms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryTermResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/glossary-terms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlossaryTermRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryTermResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/glossary-terms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/glossary-terms/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlossaryTermLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlossaryTermLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/home-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HomePageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/home-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HomePageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HomePageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/home-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/home-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HomePageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HomePageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/litepaper": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LitepaperResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/litepaper": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LitepaperRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LitepaperResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/litepaper": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/litepaper/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LitepaperLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LitepaperLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/navigation": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NavigationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/navigation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NavigationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NavigationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/navigation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/navigation/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NavigationLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NavigationLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/network-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NetworkPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/network-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NetworkPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NetworkPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/network-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/network-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NetworkPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NetworkPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/page-not-found": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageNotFoundResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/page-not-found": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PageNotFoundRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageNotFoundResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/page-not-found": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/page-not-found/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PageNotFoundLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageNotFoundLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/press-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/press-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PressPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/press-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/press-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PressPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/press-posts": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPostListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/press-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PressPostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/press-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/press-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PressPostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/press-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/press-posts/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PressPostLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PressPostLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/team-members": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamMemberListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/team-members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamMemberRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamMemberResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/team-members/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamMemberResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/team-members/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamMemberRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamMemberResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/team-members/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/team-members/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamMemberLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamMemberLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/trust-center-advisors-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterAdvisorsPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/trust-center-advisors-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterAdvisorsPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterAdvisorsPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/trust-center-advisors-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/trust-center-advisors-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterAdvisorsPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterAdvisorsPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/trust-center-categories": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterCategoryListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/trust-center-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/trust-center-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/trust-center-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/trust-center-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/trust-center-categories/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterCategoryLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterCategoryLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/trust-center-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/trust-center-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/trust-center-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/trust-center-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/trust-center-posts": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPostListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/trust-center-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterPostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/trust-center-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/trust-center-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterPostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/trust-center-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/trust-center-posts/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrustCenterPostLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrustCenterPostLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/use-cases": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCaseListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/use-cases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UseCaseRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCaseResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/use-cases/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCaseResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/use-cases/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UseCaseRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCaseResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/use-cases/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/use-cases/{id}/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UseCaseLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCaseLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/use-cases-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCasesPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/use-cases-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UseCasesPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCasesPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/use-cases-page": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/use-cases-page/localizations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UseCasesPageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UseCasesPageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
